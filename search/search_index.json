{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"LeakCanary \ud83d\udc24","text":"<p>LeakCanary is a memory leak detection library for Android.</p> <p> </p> <p>LeakCanary\u2019s knowledge of the internals of the Android Framework gives it a unique ability to narrow down the cause of each leak, helping developers dramatically reduce jank, <code>Application Not Responding</code> freezes and <code>OutOfMemoryError</code> crashes.</p> <p>Get started!</p> <p>Quote</p> <p>\u201cA small leak will sink a great ship.\u201d - Benjamin Franklin</p>"},{"location":"blog-articles/","title":"Blog Articles","text":"<ul> <li>Memory Leaks in Android</li> <li>Detect memory leaks in your instrumentation tests using LeakCanary</li> <li>9 ways to avoid memory leaks in Android</li> <li>LeakCanary - Deobfuscation Feature Explained</li> <li>LeakCanary - An in-depth example of Android memory-leaks in MVP architecture</li> <li>Detecting memory leaks in Android applications</li> </ul> <p>Your article should be here, please update this list! Any technical level welcome.</p>"},{"location":"changelog/","title":"Change Log","text":"<p>Please thank our contributors \ud83d\ude4f \ud83d\ude4f \ud83d\ude4f.</p>"},{"location":"changelog/#version-30-alpha-4-2024-05-10","title":"Version 3.0 Alpha 4 (2024-05-10)","text":"<ul> <li>Deleted the <code>shark-heap-growth</code> artifact, the code has been merged into the <code>shark*</code> and <code>leakcanary*</code> modules.</li> <li>New <code>leakcanary-android-test</code> and <code>leakcanary-android-uiautomator</code> artifacts.</li> <li>Undo of breaking API changes that were introduced in alpha 1. The goal is to make the upgrade seamless. Please file an issue if you find an API breaking change from a 2.x release.</li> <li>Optimization: for known data structures that don\u2019t reference the rest of the graph beyond the references we know about, we explore them locally at once and stop enqueuing their internals, which reduces the memory footprint and the IO reads.</li> <li>Revamped the heap growth detection APIs, added support for UI Automator and Shark CLI.</li> </ul> <p>(note: I skipped from alpha 1 to alpha 4 because I messed up a few releases. Sorry!)</p>"},{"location":"changelog/#heap-growth-espresso-test-example","title":"Heap Growth: Espresso test example","text":"<p>Add the dependency:</p> <pre><code>dependencies {\nandroidTestImplementation 'com.squareup.leakcanary:leakcanary-android-test:3.0-alpha-2'\n}\n</code></pre> <p>Ensure your UI tests have enough heap by updating <code>src/androidTest/AndroidManifest.xml</code>:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;manifest\nxmlns:android=\"http://schemas.android.com/apk/res/android\"&gt;\n\n&lt;!-- Performing the heap growth analysis in process requires more heap. --&gt;\n&lt;application\nandroid:largeHeap=\"true\"/&gt;\n&lt;/manifest&gt;\n</code></pre> <pre><code>class MyEspressoTest {\nval detector = ObjectGrowthDetector\n.forAndroidHeap()\n.repeatingAndroidInProcessScenario()\n\n@Test\nfun greeter_says_hello_does_not_leak() {\n// Runs repeatedly until the heap stops growing or we reach max heap dumps.\nval heapGrowth = detector.findRepeatedlyGrowingObjects {\nonView(withId(R.id.name_field)).perform(typeText(\"Steve\"))\nonView(withId(R.id.greet_button)).perform(click())\nonView(withText(\"Hello Steve!\")).check(matches(isDisplayed()))\n}\n\nassertThat(heapGrowth.growingObjects).isEmpty()\n}\n}\n</code></pre>"},{"location":"changelog/#heap-growth-ui-automator-test-example","title":"Heap Growth: UI Automator test example.","text":"<p>Add the dependency:</p> <pre><code>dependencies {\nandroidTestImplementation 'com.squareup.leakcanary:leakcanary-android-uiautomator:3.0-alpha-2'\n}\n</code></pre> <pre><code>class MyUiAutomatorTest {\nval detector = ObjectGrowthDetector\n.forAndroidHeap()\n.repeatingUiAutomatorScenario()\n\n@Test\nfun clicking_welcome_does_not_leak() {\nval device = UiDevice.getInstance(InstrumentationRegistry.getInstrumentation())\n// Runs repeatedly until the heap stops growing or we reach max heap dumps.\nval heapGrowth = detector.findRepeatedlyGrowingObjects {\ndevice.findObject(By.text(\"Welcome!\")).click()\n}\n\nassertThat(heapGrowth.growingObjects).isEmpty()\n}\n}\n</code></pre>"},{"location":"changelog/#heap-growth-shark-cli","title":"Heap Growth: Shark CLI","text":"<p>Download the Shark CLI Zip (alphas cannot be released to brew) and unzip it.</p> <p>Run the <code>heap-growth</code> command:</p> <pre><code>$ ~/Downloads/shark-cli-3.0-alpha-2/bin/shark-cli -p com.example.app.debug heap-growth\n</code></pre>"},{"location":"changelog/#version-214-2024-04-17","title":"Version 2.14 (2024-04-17)","text":"<ul> <li>\ud83d\udc1b #2650 Removed accidental usage of <code>SettableFuture</code>, a <code>WorkManager</code> internal class, which will be removed in a future release of WorkManager. After updating WorkManager to that future release, all versions of LeakCanary from 2.8 to 2.13 will crash on leak analysis. To avoid a nasty surprise in the near future, update to LeakCanary 2.14.</li> <li>\ud83d\udd28 #2660 Add proguard mapping support for LeakCanary release.</li> <li>\ud83d\udc1b #2531 Heap dump &amp; leak lists not preserving list position when navigating.</li> <li>\ud83d\udc24 #2615 Automatic fix of AOSP PermissionControllerManager leak (issuetracker.google.com/issues/318415056).</li> <li>\ud83d\udc24 #2559 Ignore <code>UiModeManager</code> AOSP leak.</li> <li>\ud83d\udca5 #2643 Fixed rare crash on RenderHeapDumpScreen.</li> </ul>"},{"location":"changelog/#version-30-alpha-1-2024-01-09","title":"Version 3.0 Alpha 1 (2024-01-09)","text":"<p>This alpha release marks the start of the work on LeakCanary 3. It\u2019s not stable! While I intend to rework some APIs, I also want to minimize migration work. The best way to ensure migrations will go smoothly is to try upgrading to a 3.0 alpha and to let me know if you get any compile or runtime error.</p>"},{"location":"changelog/#heap-growth","title":"Heap Growth","text":"<p>New APIs, not stable yet: the <code>shark-heap-growth</code> artifact contains APIs for writing test scenarios that detect repeated heap growth.</p> <p>Here\u2019s how it\u2019s used with an Espresso test:</p> <pre><code>class MyEspressoTest {\n\n@Test\nfun greeter_says_hello_does_not_leak() {\n// Runs in a loop until the heap stops growing or we reach max heap dumps.\nval heapTraversal = HeapGrowthDetector.detectRepeatedHeapGrowth {\n// Runs repeatedly until the heap stops growing or we reach maxHeapDumps.\nonView(withId(R.id.name_field)).perform(typeText(\"Steve\"))\nonView(withId(R.id.greet_button)).perform(click())\nonView(withText(\"Hello Steve!\")).check(matches(isDisplayed()))\n}\n\nassertThat(heapTraversal.growingNodes).isEmpty()\n}\n}\n</code></pre> <p>Here\u2019s an example set up, this is all very manual for now.</p> <p>Add the new dependency:</p> <pre><code>dependencies {\nandroidTestImplementation 'com.squareup.leakcanary:shark-heap-growth:3.0-alpha-1'\nandroidTestImplementation 'com.squareup.leakcanary:leakcanary-android-core:3.0-alpha-1'\n}\n</code></pre> <p>Create an implementation setup for Espresso in process UI tests:</p> <pre><code>import leakcanary.AndroidDebugHeapDumper\nimport shark.AndroidReferenceMatchers\nimport shark.AndroidReferenceReaderFactory\nimport shark.CloseableHeapGraph\nimport shark.DiffingHeapGrowthDetector\nimport shark.HeapGraphProvider\nimport shark.HeapTraversal\nimport shark.HprofHeapGraph.Companion.openHeapGraph\nimport shark.IgnoredReferenceMatcher\nimport shark.LiveHeapGrowthDetector\nimport shark.LoopingHeapGrowthDetector\nimport shark.MatchingGcRootProvider\nimport shark.ReferencePattern.InstanceFieldPattern\nimport java.io.File\nimport java.text.SimpleDateFormat\nimport java.util.Date\nimport java.util.Locale\n\n/**\n * Heap growth detector for in process Espresso UI tests.\n *\n * Call [LiveHeapGrowthDetector.detectRepeatedHeapGrowth] with a scenario to repeat,\n * then assert that the resulting [shark.HeapTraversalWithDiff.growingNodes] is empty.\n */\nval HeapGrowthDetector by lazy {\nval referenceMatchers = AndroidReferenceMatchers.appDefaults +\nHeapTraversal.ignoredReferences +\n// https://cs.android.com/android/_/android/platform/frameworks/base/+/6985fb39f07294fb979b14ba0ebabfd2fea06d34\nIgnoredReferenceMatcher(InstanceFieldPattern(\"android.os.StrictMode\", \"sLastVmViolationTime\"))\n\nval dateFormat = SimpleDateFormat(\"yyyy-MM-dd_HH-mm-ss_SSS'-heap-growth.hprof'\", Locale.US)\nval uploadedTracesDirectory = File(\"/sdcard/traces/\")\nuploadedTracesDirectory.mkdirs()\ncheck(uploadedTracesDirectory.exists()) {\n\"Expected heap dump folder to exist: ${uploadedTracesDirectory.absolutePath}\"\n}\n\nval heapGraphProvider = HeapGraphProvider {\nval fileName = dateFormat.format(Date())\nval heapDumpFile = File(uploadedTracesDirectory, fileName)\nAndroidDebugHeapDumper.dumpHeap(heapDumpFile)\ncheck(heapDumpFile.exists()) {\n\"Expected file to exist after heap dump: ${heapDumpFile.absolutePath}\"\n}\nval realGraph = heapDumpFile.openHeapGraph()\nobject : CloseableHeapGraph by realGraph {\noverride fun close() {\nrealGraph.close()\nheapDumpFile.delete()\n}\n}\n}\n\nLiveHeapGrowthDetector(\nmaxHeapDumps = 5,\nheapGraphProvider = heapGraphProvider,\nscenarioLoopsPerDump = 5,\ndetector = LoopingHeapGrowthDetector(\nDiffingHeapGrowthDetector(\nreferenceReaderFactory = AndroidReferenceReaderFactory(referenceMatchers),\ngcRootProvider = MatchingGcRootProvider(referenceMatchers)\n)\n)\n)\n}\n</code></pre> <p>Ensure your UI tests have enough heap by updating <code>src/androidTest/AndroidManifest.xml</code>:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;manifest\nxmlns:android=\"http://schemas.android.com/apk/res/android\"&gt;\n\n&lt;!-- Performing the heap growth analysis in process requires more heap. --&gt;\n&lt;application\nandroid:largeHeap=\"true\"/&gt;\n&lt;/manifest&gt;\n</code></pre>"},{"location":"changelog/#reference-readers","title":"Reference readers","text":"<p>New APIs, not stable yet: <code>ReferenceReader</code> implementations aka expanders, are now public APIs. The names might change. These class define how LeakCanary traverses the graph, and allow for the creating of virtual references, as introduced here. These new APIs make it possible to add support for more custom data structures, and they\u2019re also useful when working directly with the <code>shark</code> APIs (for example, these APIs were necessary to build the heap growth detection tooling mentioned above).</p>"},{"location":"changelog/#objectwatcher-apis-refactor","title":"ObjectWatcher APIs refactor","text":"<p>#2612 is a first attempt at refactoring the reachability APIs. I already found backward compatibility issues (#2617), will fix in the next alpha, and probably still change the API shape.</p> <p>The general purpose of this refactor is to move away from the static singletons and high coupling of the current implementation, making the reachability APIs more useful in a variaty of contexts.</p>"},{"location":"changelog/#other-bug-fixes-and-improvements","title":"Other bug fixes and improvements \ud83d\udc1b\ud83d\udd28","text":"<ul> <li>Bumped Kotlin to 1.8.21</li> <li>Dropped support for detecting support fragment leaks: apps should all have migrated to Android X by now, and if not they can easily add their own implementation back.</li> </ul> <p>This list reflects only a subset of all changes. For more details, the full diff.</p>"},{"location":"changelog/#version-213-2024-01-03","title":"Version 2.13 (2024-01-03)","text":"<ul> <li>\ud83d\udc1b #2565 Fix AndroidX Fragments incorrectly marked as leaking if detached but not destroyed.</li> <li>\ud83d\udca5 #2568 Fixed missing <code>RECEIVER_EXPORTED</code> flag when calling <code>registerReceiver()</code> on API 34+.</li> <li>\ud83d\udd28 #2555 Binder stubs are now called out in leak traces.</li> <li>\ud83d\udc24 #2601 Added several known manufacturer &amp; framework leaks.</li> </ul>"},{"location":"changelog/#version-212-2023-06-29","title":"Version 2.12 (2023-06-29)","text":"<ul> <li>\ud83d\udca5 #2527 <code>LifecycleRegistry</code> in <code>androidx.lifecycle:lifecycle-runtime</code> was migrated to kotlin and its <code>mState</code> field name changed to <code>state</code> which broke LeakCanary expectations.</li> <li>\ud83d\udc24 #2545 Added several known manufacturer &amp; framework leaks.</li> </ul>"},{"location":"changelog/#version-211-2023-05-17","title":"Version 2.11 (2023-05-17)","text":"<ul> <li>\ud83d\udc1b #1764 Ignore phantom classes that were unloaded than reloaded (long time LeakCanary bug).</li> <li>\ud83d\udc1b #2471 Fix LeakCanary introducing a weird leak in Google\u2019s CI infra.</li> <li>\ud83d\udc1b #2496 Fix broken ViewModel leak detection</li> </ul>"},{"location":"changelog/#version-210-2022-11-10","title":"Version 2.10 (2022-11-10)","text":""},{"location":"changelog/#experimental-neo4j-heap-dump-exploration","title":"Experimental Neo4j heap dump exploration","text":"<p><code>shark-cli</code> has a new experiment <code>neo4j</code> command that will convert a heap dump into an embedded Neo4j database and then open Neo4j Browser to explore the heap dump.</p> <pre><code>brew install leakcanary-shark\n\nshark-cli --process com.example.app.debug neo4j\n</code></pre> <p></p>"},{"location":"changelog/#other-bug-fixes-and-improvements_1","title":"Other bug fixes and improvements \ud83d\udc1b\ud83d\udd28","text":"<ul> <li>\ud83d\udc24 #2440 Add Android 13 <code>POST_NOTICICATIONS</code> permission as well as a new <code>LeakCanary.Config.showNotifications</code> config to disable notifications entirely.</li> <li>\ud83d\udc24 #2416 Add Android 13 monochrome icon.</li> <li>\ud83d\udca5 #2371 Fix db crash when navigating heap dump screen.</li> <li>\ud83d\udc1b #2393 Allow LeakCanary to be defined as an AndroidX Startup dependency.</li> <li>\ud83d\udca5 #2430 Fix ShortcutManager crash on Android TV.</li> <li>\ud83d\udca5 #2382 Fix heap dump close crash.</li> </ul> <p>This list reflects only a subset of all changes. For more details, see the 2.10 Milestone and the full diff.</p>"},{"location":"changelog/#version-291-2022-04-20","title":"Version 2.9.1 (2022-04-20)","text":""},{"location":"changelog/#preface","title":"Preface","text":"<p>What are some things you\u2019d like to see in a future LeakCanary 3 version? Tell me on Twitter!</p> <p>Some ideas I\u2019m playing with:</p> <ul> <li>Moving heap analysis leak visualisation to a separate single app (written with Compose!) available on the PlayStore.</li> <li>Bumping Okio to 3.0</li> <li>Multiplatform heap analysis? Analyze a JVM heap dump in your browser?!</li> <li>Visualize the heap dominators / retained size as a treemap.</li> <li>A backend for LeakCanary?</li> </ul> <p>Anyway, that\u2019s still very much the future, let\u2019s talk about what\u2019s in <code>2.9.1</code> now!</p>"},{"location":"changelog/#new-metrics-in-heap-analysis-metadata","title":"New metrics in heap analysis metadata","text":"<p>I built LeakCanary to help fix leaks, but in doing so I accidentally wrote a fairly flexible heap dump parser. Since we\u2019re parsing the heap to find leaks anyway, we might as well report additional interesting metrics. Here\u2019s what you\u2019ll now see in the heap dump metadata:</p> <ul> <li>Class count: count of loaded classes</li> <li>Instance count</li> <li>Primitive array count</li> <li>Object array count</li> <li>Thread count</li> <li>Heap total bytes</li> <li>Bitmap count</li> <li>Bitmap total bytes</li> <li>Large bitmap count (bitmaps with more pixels than 1.1x the pixels on screen)</li> <li>Large bitmap total bytes</li> <li>SQLiteDatabase in memory (open or closed, as well as their file path)</li> </ul> <p>This is just a first pass, feedback and ideas welcome!</p>"},{"location":"changelog/#performance-improvements","title":"Performance improvements","text":"<p>The heap analysis now traverses the heap dump using <code>RandomAccessFile</code> instead of <code>FileChannel.transferTo()</code> and is now 40% faster on API 23 and 20% faster on newer APIs. Also, sticky class GC roots are now deduplicated, which great reduces the memory footprint of LeakCanary on API 23 (#2324). You can read about the related investigation on py.hashnode.dev.</p>"},{"location":"changelog/#breaking-change-failtestonleakrunlistener-deleted","title":"Breaking change:  FailTestOnLeakRunListener deleted","text":"<p><code>FailTestOnLeakRunListener</code>, <code>FailTestOnLeak</code> and <code>FailAnnotatedTestOnLeakRunListener</code> were deprecated in LeakCanary 2.8 as they rely on hacking the Android Test library internals which have since changed, and have been replaced by <code>LeakAssertions.assertNoLeak()</code> and the <code>DetectLeaksAfterTestSuccess</code> test rule. I was initially planning of keep these around, but as I tried to increase API level coverage in LeakCanary I needed to upgrade the Android Test library to a more recent version, and the hacks now had compilation errors. So they\u2019re gone: #2282. If you can\u2019t use the test rules just yet, you\u2019re welcome to copy paste the listener implementations in your own codebase.</p>"},{"location":"changelog/#other-bug-fixes-and-improvements_2","title":"Other bug fixes and improvements \ud83d\udc1b\ud83d\udd28","text":"<ul> <li>\ud83d\udca5 #2367 Fixed <code>AndroidLeakFixes.FLUSH_HANDLER_THREADS</code> (<code>HandlerThread</code> can have a null <code>Looper</code>).</li> <li>\ud83d\udca5 #2286 Update Curtains to include Proguard rules and prevent <code>WindowCallbackWrapper</code> crashes.</li> <li>\ud83d\udca5 #2294 Fixed <code>WindowDelegateCallback.onMenuOpened()</code> crash.</li> <li>\ud83d\udc24 #2328 Fixed ToastEventListener leak. Sorry \ud83d\ude2c!</li> <li>\ud83d\udca5 #2310 Fixed crash when using WorkManager &lt; 2.1.0.</li> <li>\ud83d\udca5 #2342 Fixed crash when <code>HashSet.map</code> is null (which isn\u2019t supposed to happen, oh well, Android \ud83e\udd37\u200d\u2642\ufe0f).</li> <li>\ud83d\udc1b #2117 Fixed StrictMode disk read violations.</li> <li>\ud83d\udca5 #2351 Fixed a race causing a startup crash.</li> <li>\ud83d\udca5 #2315 Fixed crash when using Okio 1.14.</li> <li>\ud83d\udc1b #2182 Fixed multi rescheduling of <code>BackgroundListener$checkAppInBackground</code>.</li> <li>\ud83d\udca5 #2360 Fixed SQLiteOpenHelper concurrent creation crash.</li> </ul> <p>This list reflects only a subset of all changes. For more details, see the 2.9 Milestone and the full diff.</p>"},{"location":"changelog/#version-281-2022-01-06","title":"Version 2.8.1 (2022-01-06)","text":"<p>This is a bugfix release, a quick follow up to <code>2.8</code> which had a few major issues \ud83d\ude05. If you haven\u2019t yet, you should definitely read the <code>2.8</code> changelog.</p>"},{"location":"changelog/#thanks","title":"Thanks","text":"<p>Please thank @dicosta, @Goooler, @plnice, @preetha1326 for their contributions, bug reports and feature requests \ud83d\ude4f \ud83d\ude4f \ud83d\ude4f.</p>"},{"location":"changelog/#crash-fixes","title":"Crash fixes \ud83d\udca5\ud83d\udca5\ud83d\udca5","text":"<p>This patch release fixes not 1, not 2, but 3 crashes!</p> <ul> <li>\ud83d\udca5 #2268 WorkManager expedited request crashes before API 31.</li> <li>\ud83d\udca5 #2270 Updating <code>LeakCanary.config</code> crashes when <code>AppWatcher</code> is not installed.</li> <li>\ud83d\udca5 #2271 Analysis failure on API 25 because <code>HashMap$Entry</code> became <code>HashMap$HashMapEntry</code> (on API 25) before it finally changed to <code>HashMap$Node</code>.</li> </ul> <p>For more details, see the 2.8.1 Milestone and the full diff.</p>"},{"location":"changelog/#version-28-2022-01-04","title":"Version 2.8 (2022-01-04)","text":"<p>Note: please update to <code>2.8.1</code> instead.</p>"},{"location":"changelog/#preface_1","title":"Preface","text":"<p>The last release was 9 months ago. What happened?! Well, soon after releasing LeakCanary 2.7, I had my 2nd baby, a wonderful daughter \ud83d\ude0d. Having 2 young kids leaves a lot less time available for Open Source work\u2026 but it\u2019s worth it!</p> <p>\u2015 P.Y.</p>"},{"location":"changelog/#thanks_1","title":"Thanks","text":"<p>Please thank @aaronweihe, @alhah, @Andre-max, @AoraMD, @BraisGabin, @breezenan, @Goooler, @iliaskomp @Jeff11, @jmnwong, @IdioticMadman, @keyur1sst, @lchen8, @leinardi, @Maragues, @mars885, @mateuszkwiecinski, @matiash, @maxxx, @preetha1326, @SimonMarquis, @slavonnet, @Sonphil, @summerlyr, @SUPERCILEX, @utwyko, @ZacSweers, @ziranshang, @zoltish for their contributions, bug reports and feature requests \ud83d\ude4f \ud83d\ude4f \ud83d\ude4f.</p>"},{"location":"changelog/#improved-support-for-data-structure-internals","title":"Improved support for data structure internals","text":"<p>\ud83e\udd13 Inspired by Android Studio, LeakCanary\u2019s node discovery during heap graph traversal is now abstracted away. This allows overlaying logical structure over common data structure internals.</p> <p>\ud83d\ude05 WHAT?!</p> <p>\ud83d\udc49 This means we can make known data structures look more like their APIs than their internals. For example, developers tend to think of setting a <code>HashMap</code> entry as <code>map[\"key\"] = value</code> rather than <code>map.table[hash(\"key\")].next.next.next = Node(value)</code>, which is what LeakCanary would previously show in its leak traces.</p> <p>Let\u2019s look at a <code>HashMap</code> example:</p> <pre><code>class CheckoutController {\n\nval tabs = HashMap&lt;String, Tab&gt;()\n\nfun addItemsTab(tab: Tab) {\ntabs[\"ItemsTab\"] = tab\n}\n}\n</code></pre> <p>If the <code>Tab</code> instance holds on to a view, we might see a leak trace that would look like this:</p> <pre><code>\u2502 ...\n\u251c\u2500 com.example.CheckoutController instance\n\u2502    \u2193 CheckoutController.tabs\n\u251c\u2500 java.util.HashMap instance\n\u2502    \u2193 HashMap.table\n\u251c\u2500 java.util.HashMap$Node[] array\n\u2502    \u2193 HashMap$Node[42]\n\u251c\u2500 java.util.HashMap$Node instance\n\u2502    \u2193 HashMap$Node.next\n\u251c\u2500 java.util.HashMap$Node instance\n\u2502    \u2193 HashMap$Node.value\n\u251c\u2500 com.example.Tab instance\n\u2502 ...\n</code></pre> <p>With the improved data structure support, the leak trace is much clearer (also note how the <code>ItemsTab</code> string key is now surfaced):</p> <pre><code>\u2502 ...\n\u251c\u2500 com.example.CheckoutController instance\n\u2502    \u2193 CheckoutController.tabs\n\u251c\u2500 java.util.HashMap instance\n\u2502    \u2193 HashMap[ItemsTab]\n\u251c\u2500 com.example.Tab instance\n\u2502 ...\n</code></pre> <p>Another benefit of this change is that leak signatures become less dependent of the runtime, and therefore are more consistent. This is especially true for any data structure that relies on a linked list (<code>HashMap</code>, <code>LinkedList</code>, <code>MessageQueue</code>, \u2026). Currently LeakCanary supports a limited set of common data structures from Apache Harmony, Open JDK, and the Android SDK. Let me know what else you need!</p>"},{"location":"changelog/#objectanimator-leaks","title":"ObjectAnimator leaks","text":"<p>LeakCanary will now detect leaks that trigger when forgetting to cancel <code>ObjectAnimator</code>. This new feature is enabled by the node discovery changes described above!</p> <p>Let\u2019s say you accidentally start an infinite <code>ObjectAnimator</code> and never cancel it, like so:</p> <pre><code>class ExampleActivity : Activity() {\n\noverride fun onCreate(savedInstanceState: Bundle?) {\nsuper.onCreate(savedInstanceState)\nsetContentView(R.layout.main_activity)\nfindViewById&lt;Button&gt;(R.id.button).setOnClickListener { view -&gt;\nObjectAnimator.ofFloat(view, View.ALPHA, 0.1f, 0.2f).apply {\nduration = 100\nrepeatMode = ValueAnimator.REVERSE\nrepeatCount = ValueAnimator.INFINITE\nstart()\n}\n}\n}\n}\n</code></pre> <p>In previous releases, LeakCanary would detect that the animated view is leaking but it wouldn\u2019t be able to find the leak and instead would report it as an unreachable object: An unreachable object is still in memory but LeakCanary could not find a strong reference path from GC roots.</p> <p>LeakCanary now reports the leak and adds animator state information, helping detect and fix any infinite <code>ObjectAnimator</code>.</p> <pre><code>\u252c\u2500\u2500\u2500\n\u2502 GC Root: Thread object\n\u2502\n\u251c\u2500 java.lang.Thread instance\n\u2502    Leaking: NO (the main thread always runs)\n\u2502    Thread name: 'main'\n\u2502    \u2193 Thread.threadLocals\n\u2502             ~~~~~~~~~~~~\n...\n\u251c\u2500 android.animation.ObjectAnimator instance\n\u2502    Leaking: UNKNOWN\n\u2502    mListeners = null\n\u2502    mPropertyName = null\n\u2502    mProperty.mName = alpha\n\u2502    mProperty.mType = java.lang.Float\n\u2502    mInitialized = true\n\u2502    mStarted = true\n\u2502    mRunning = true\n\u2502    mAnimationEndRequested = false\n\u2502    mDuration = 100\n\u2502    mStartDelay = 0\n\u2502    mRepeatCount = INFINITE (-1)\n\u2502    mRepeatMode = REVERSE (2)\n\u2502    \u2193 ObjectAnimator.mTarget\n\u2502                     ~~~~~~~\n\u2570\u2192 android.widget.Button instance\n     Leaking: YES (View.mContext references a destroyed activity)\n</code></pre> <p>To learn more, see this AOSP issue: ObjectAnimator.mTarget weak ref creates memory leaks on infinite animators.</p>"},{"location":"changelog/#leak-detection-in-tests","title":"Leak detection in tests","text":"<p>Previous releases of <code>leakcanary-android-instrumentation</code> introduced a <code>FailTestOnLeakRunListener</code> which could run leak detection after each UI tests. Unfortunately <code>FailTestOnLeakRunListener</code> relied on a hack around <code>androidx.test</code> internals to report failures. The internals keep changing with every <code>androidx.test</code> release and breaking <code>FailTestOnLeakRunListener</code> \ud83d\ude2d.</p> <p><code>FailTestOnLeakRunListener</code> is now deprecated (\ud83d\udc4b) and replaced by the <code>DetectLeaksAfterTestSuccess</code> test rule, which you can add to your test like any normal test rule.</p> <p>Additionally, you can call <code>LeakAssertions.assertNoLeak()</code> from anywhere in your instrumentation tests. You can also annotate tests with <code>@SkipLeakDetection</code> (for that to work you\u2019ll also need to set up the <code>TestDescriptionHolder</code> test rule).</p> <pre><code>class CartTest {\n@get:Rule\nval rules = RuleChain.outerRule(TestDescriptionHolder)\n.around(DetectLeaksAfterTestSuccess())\n.around(ActivityScenarioRule(CartActivity::class.java))\n\n@Test\nfun addItemToCart() {\n// ...\n}\n\n@SkipLeakDetection(\"See #1234\")\n@Test\nfun removeItemFromCart() {\n// ...\n}\n}\n</code></pre>"},{"location":"changelog/#android-12","title":"Android 12","text":"<p>Hopefully this time we fixed everything that Android 12 broke: missing <code>exported:true</code> tags, missing pending intent flags, and <code>ForegroundServiceStartNotAllowedException</code> crashes. If not, let us know! Can\u2019t wait for Android 13 to break everything again \ud83e\udd2c.</p>"},{"location":"changelog/#workmanager","title":"WorkManager","text":"<p>Running an Android Service without crashing (<code>ForegroundServiceStartNotAllowedException</code>\u2026) is becoming harder with every release of Android, so I got rid of the LeakCanary heap analyzer service! Instead, LeakCanary leverages WorkManager if you already have it as a dependency. If you don\u2019t use WorkManager, then LeakCanary will fall back to using a simple thread.</p> <p>Note: I recommend using at least WorkManager 2.7.0 as it adds the <code>WorkRequest.Builder.setExpedited()</code> API which LeakCanary leverages if available.</p>"},{"location":"changelog/#multi-process","title":"Multi process","text":"<p>Switching to WorkManager also impacts the LeakCanary multi process approach, which now leverages WorkManager remote jobs. Blog on how I got this working: WorkManager multi-process for libraries.</p> <p>Multi process is harder to get right so you should only use this if LeakCanary frequently runs out of memory while performing the heap analysis. Here are the updated set up steps:</p> <p>1) Add the <code>leakcanary-android-process</code> dependency and keep the <code>leakcanary-android</code> dependency.</p> <pre><code>dependencies {\ndebugImplementation 'com.squareup.leakcanary:leakcanary-android:2.8'\ndebugImplementation 'com.squareup.leakcanary:leakcanary-android-process:2.8'\n}\n</code></pre> <p>2) Skip the initialization code in the <code>Application</code> class</p> <pre><code>class ExampleApplication : Application() {\n\noverride fun onCreate() {\nif (LeakCanaryProcess.isInAnalyzerProcess(this)) {\nreturn\n}\nsuper.onCreate()\n// normal init goes here, skipped in :leakcanary process.\n}\n}\n</code></pre> <p>That\u2019s it! Note that event listeners (see below) related to the analysis will fire in the remote process.</p>"},{"location":"changelog/#androidx-app-startup","title":"AndroidX App Startup","text":"<p>LeakCanary now optionally supports the AndroidX App Startup library. All you need to do is replace the <code>leakcanary-android</code> dependency with <code>leakcanary-android-startup</code>:</p> <pre><code>dependencies {\n// Remove the normal leakcanary-android dependency\n// debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.8'\ndebugImplementation 'com.squareup.leakcanary:leakcanary-android-startup:2.8'\n}\n</code></pre> <p>Note 1: <code>leakcanary-android</code> adds the code for automatic installl to <code>leakcanary-android-core</code>. If you\u2019re calling <code>AppWatcher.manualInstall()</code>, you can depend directly on <code>leakcanary-android-core</code> instead of <code>leakcanary-android</code>, and you won\u2019t need the disable any automatic install.</p> <p>Note 2: the same principle applies to <code>leakcanary-object-watcher-android</code>: it depends on <code>leakcanary-object-watcher-android-core</code> and adds automatic install, while <code>leakcanary-object-watcher-android-startup</code> leverages the App Startup library. Same for <code>plumber-android</code>, <code>plumber-android-core</code> and  <code>plumber-android-startup</code>.</p>"},{"location":"changelog/#event-listeners","title":"Event listeners","text":"<p><code>LeakCanary.Config</code> has a new <code>eventListeners</code> field allowing you to react to LeakCanary\u2019s lifecycle. If you want to customize this, you most likely should be keeping the default list of listeners and add or remove from it.</p> <p>For example, if you want to disable the LeakCanary toast:</p> <pre><code>LeakCanary.config = LeakCanary.config.run {\ncopy(\neventListeners = eventListeners.filter {\nit !is ToastEventListener\n}\n)\n}\n</code></pre> <p>If you want to upload heap analysis results:</p> <pre><code>LeakCanary.config = LeakCanary.config.run {\ncopy(\neventListeners = eventListeners + EventListener { event -&gt;\nif (event is HeapAnalysisSucceeded) {\n// Upload event.heapAnalysis\n}\n}\n)\n}\n</code></pre> <p>Note: <code>Leakcanary.Config.onHeapAnalyzedListener</code> still works but is now deprecated.</p> <p>Feedback welcome on this new API!</p>"},{"location":"changelog/#other-bug-fixes-and-improvements_3","title":"Other bug fixes and improvements \ud83d\udc1b\ud83d\udd28","text":"<ul> <li>#2096 Opening / sharing heap dump files now supports LeakCanary as an option.</li> <li>#2210 First Compose dedicated object inspectors!</li> <li>#2121 Support for customizing the heap dumper.</li> </ul> <p>This list reflects only a subset of all changes. For more details, see the 2.8 Milestone and the full diff.</p>"},{"location":"changelog/#version-27-2021-03-26","title":"Version 2.7 (2021-03-26)","text":"<p>Please thank @chao2zhang, @ihrupin, @jzbrooks, @msfjarvis, @reneargento, @Unpublished for their contributions, bug reports and feature requests \ud83d\ude4f \ud83d\ude4f \ud83d\ude4f.</p>"},{"location":"changelog/#finer-grained-root-view-watching","title":"Finer grained root view watching","text":"<p>In version 2.6, LeakCanary added detection of root views retained after  <code>View.onDetachedFromWindow()</code>. This helps find more leaks, but unfortunately some Android widgets keep a detached root view around to reattach it later (e.g. spinner). App developers also sometimes do the same with dialogs, keeping a single instance around and calling <code>show()</code> and <code>hide()</code> as needed. As a result, LeakCanary would report leaks that were actually not leaks.</p> <p>In version 2.7, the default behavior changed: LeakCanary will continue to detect leaks of toasts, but will ignore root views created by a PopupWindow (which is what Android widgets use). It will also ignore root views created by a dialog by default, and you can turn this back on by setting the <code>leak_canary_watcher_watch_dismissed_dialogs</code> resource boolean to true:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;resources&gt;\n&lt;bool name=\"leak_canary_watcher_watch_dismissed_dialogs\"&gt;true&lt;/bool&gt;\n&lt;/resources&gt;\n</code></pre> <p>This is implemented using a new Square library: Curtains.</p>"},{"location":"changelog/#targeting-android-12","title":"Targeting Android 12","text":"<p>We fixed two issues for apps that want to target Android 12:</p> <ul> <li>#2074 Activities that use intent filters must declare the <code>android:exported</code> attribute.</li> <li>#2079 PendingIntent requires the <code>FLAG_IMMUTABLE</code> flag.</li> </ul>"},{"location":"changelog/#bug-fixes-and-improvements","title":"Bug fixes and improvements \ud83d\udc1b\ud83d\udd28","text":"<ul> <li>#2075 Fixed crash when sharing heap dumps.</li> <li>#2067 Fixed crash when opening leaks from older versions (before 2.6) of LeakCanary.</li> <li>#2049 Fixed Plumber crash due to R8 shaking AndroidLeakFixes.</li> <li>#2084 Fixed Shark crash when used from multiple threads.</li> <li>#2054 \ud83d\ude48\ud83d\ude49\ud83d\ude4a Blocked Monkeys from deleting leaks.</li> <li>#2069 Added X button to the root leak activity (for custom devices with no back button)</li> <li>#2091 Added receiver details if LoadedApk shows up in the leaktrace.</li> <li>#2083 Added service status details (created or not) to leaktrace.</li> <li>#2099 Retry button if analysis fails.</li> <li>#2066 When heap analysis in UI tests is skipped and NoAnalysis is returned, NoAnalysis now includes a reason to help debug why it didn\u2019t run.</li> <li>#2000 The LeakCanary CI now leverages GitHub actions instead of Travis.</li> </ul> <p>For more details, see the 2.7 Milestone and the full diff.</p>"},{"location":"changelog/#version-26-christmas-release-2020-12-24","title":"Version 2.6 - Christmas Release \ud83c\udf84 (2020-12-24)","text":"<p>Please thank @chao2zhang, @ChaosLeung, @LitterSun, @mickverm, @opatry, @Thomas-Vos, @tricknology, @rahul-a, @samoylenkodmitry, @sing0055, @ubiratansoares for their contributions, bug reports and feature requests \ud83d\ude4f \ud83d\ude4f \ud83d\ude4f.</p> <p>This Christmas Release includes several external contributions and a bunch of cool new features! \ud83c\udf81\ud83c\udf81</p>"},{"location":"changelog/#detecting-root-views-retained-after-viewondetachedfromwindow","title":"Detecting root views retained after <code>View.onDetachedFromWindow()</code>","text":"<p>On Android, every displayed view hierarchy is attached to a window, whether it be the view hierarchy of an activity, a dialog, a toast or a chat head. After a view hierarchy is detached from its window, it should be garbage collected.</p> <p>LeakCanary already detects leaks of activity view hierarchies because retained detached views reference their activity context and LeakCanary detects activities retained after <code>Activity.onDestroy()</code>. In this new release, LeakCanary will now detect the leak of a dialog view hierarchy as soon as that dialog is dismissed, or any other view that is passed to WindowManager.removeView().</p>"},{"location":"changelog/#detecting-services-retained-after-serviceondestroy","title":"Detecting services retained after <code>Service.onDestroy()</code>","text":"<p>After an Android service is destroyed, it should be garbage collected. Unfortunately, the Android SDK does not provide any generic API to observe the service lifecycle. We worked around that using reflection on greylist APIs (details in #2014). Let\u2019s hope this motivates the Android team to build the APIs developers need.</p>"},{"location":"changelog/#configuring-retained-object-detection","title":"Configuring retained object detection","text":"<p>With the detection of 2 new types of retained objects, we\u2019re also adding APIs to configure which watchers should be installed as well as adding filtering capabilities.</p> <p>First, disable the automatic install:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;resources&gt;\n&lt;bool name=\"leak_canary_watcher_auto_install\"&gt;false&lt;/bool&gt;\n&lt;/resources&gt;\n</code></pre> <p>Then you can install LeakCanary manually. LeakCanary 2.6 comes with 4 watchers installed by default: <code>ActivityWatcher</code>, <code>FragmentAndViewModelWatcher</code>, <code>RootViewWatcher</code>, <code>ServiceWatcher</code>. Here\u2019s an example to get all the default watchers except <code>ServiceWatcher</code>:</p> <pre><code>class DebugExampleApplication : ExampleApplication() {\n\noverride fun onCreate() {\nsuper.onCreate()\n\nval watchersToInstall = AppWatcher.appDefaultWatchers(application)\n.filter { it !is ServiceWatcher }\n\nAppWatcher.manualInstall(\napplication = application,\nwatchersToInstall = watchersToInstall\n)\n}\n}\n</code></pre> <p>LeakCanary introduces a new functional (SAM) interface implemented by <code>ObjectWatcher</code>: <code>ReachabilityWatcher</code>, with a <code>ReachabilityWatcher.expectWeaklyReachable()</code> method that replaces the now deprecated <code>ObjectWatcher.watch()</code> method. You can create the default watcher instances with a custom <code>ReachabilityWatcher</code> that delegates to <code>AppWatcher.objectWatcher</code> but filters out specific instances (e.g. <code>BadSdkLeakingFragment</code>):</p> <pre><code>class DebugExampleApplication : ExampleApplication() {\n\noverride fun onCreate() {\nsuper.onCreate()\n\nval delegate = ReachabilityWatcher { watchedObject, description -&gt;\nif (watchedObject !is BadSdkLeakingFragment) {\nAppWatcher.objectWatcher.expectWeaklyReachable(watchedObject, description)\n}\n}\n\nval watchersToInstall = AppWatcher.appDefaultWatchers(application, delegate)\n\nAppWatcher.manualInstall(\napplication = application,\nwatchersToInstall = watchersToInstall\n)\n}\n}\n</code></pre> <p>With these new configuration options, <code>AppWatcher.config</code> is now deprecated and a no-op.</p>"},{"location":"changelog/#dumping-the-heap-on-screen-off","title":"Dumping the heap on screen off","text":"<p>The default threshold to dump the heap is 5 retained objects when the app is visible, and 1 retained object when the app is not visible. Up until now, visible meant \u201cthe app has at least one activity in started state\u201d. In LeakCanary 2.6, the app will now be considered not visible if the device screen is off, lowering the threshold to trigger heap dumps when you turn off the device screen.</p>"},{"location":"changelog/#leakcanary-for-releases","title":"LeakCanary for releases","text":"<p>LeakCanary 2.6 introduces a new artifact: <code>leakcanary-android-release</code>. This artifact exposes APIs to run a heap analysis in release builds, in production.</p> <p>Danger</p> <p>Everything about this is experimental. Running a heap analysis in production is not a very common thing to do, and we\u2019re still learning and experimenting with this. Also, both the artifact name and the APIs may change.</p> <pre><code>dependencies {\n// debugImplementation because LeakCanary should only run in debug builds.\ndebugImplementation 'com.squareup.leakcanary:leakcanary-android:2.6'\n\n// NEW: LeakCanary for releases!\nreleaseImplementation 'com.squareup.leakcanary:leakcanary-android-release:2.6'\n// Optional: detect retained objects. This helps but is not required.\nreleaseImplementation 'com.squareup.leakcanary:leakcanary-object-watcher-android:2.6'\n}\n</code></pre> <p>Here\u2019s a code example that runs a heap analysis when the screen is turned off or the app enters background, checking first if a Firebase Remote Config flag is turned on, and uploading the result to Bugsnag:</p> <pre><code>class ReleaseExampleApplication : ExampleApplication() {\n\n// Cancels heap analysis if \"heap_analysis_flag\" is false.\nprivate val flagInterceptor by lazy {\nobject : HeapAnalysisInterceptor {\n\nval remoteConfig: FirebaseRemoteConfig = TODO()\n\noverride fun intercept(chain: Chain): HeapAnalysisJob.Result {\nif (remoteConfig.getBoolean(\"heap_analysis_flag\")) {\nchain.job.cancel(\"heap_analysis_flag false\")\n}\nreturn chain.proceed()\n}\n}\n}\n\nprivate val analysisClient by lazy {\nHeapAnalysisClient(\n// Use private app storage. cacheDir is never backed up which is important.\nheapDumpDirectoryProvider = { cacheDir },\n// stripHeapDump: remove all user data from hprof before analysis.\nconfig = HeapAnalysisConfig(stripHeapDump = true),\n// Default interceptors may cancel analysis for several other reasons.\ninterceptors = listOf(flagInterceptor) + HeapAnalysisClient.defaultInterceptors(this)\n)\n}\n\nprivate val analysisExecutor by lazy {\nExecutors.newSingleThreadExecutor {\nthread(start = false, name = \"Heap analysis executor\") {\nandroid.os.Process.setThreadPriority(THREAD_PRIORITY_BACKGROUND)\nit.run()\n}\n}\n}\n\nprivate val analysisCallback: (Result) -&gt; Unit by lazy {\nval uploader = BugsnagHeapAnalysisUploader(this@ReleaseExampleApplication)\n{ result -&gt;\nif (result is Done) {\nuploader.upload(result.analysis)\n}\n}\n}\n\noverride fun onCreate() {\nsuper.onCreate()\n\n// Delete any remaining heap dump (if we crashed)\nanalysisExecutor.execute {\nanalysisClient.deleteHeapDumpFiles()\n}\n\n// Starts heap analysis on background importance\nBackgroundTrigger(\napplication = this,\nanalysisClient = analysisClient,\nanalysisExecutor = analysisExecutor,\nanalysisCallback = analysisCallback\n).start()\n\n// Starts heap analysis when screen off\nScreenOffTrigger(\napplication = this,\nanalysisClient = analysisClient,\nanalysisExecutor = analysisExecutor,\nanalysisCallback = analysisCallback\n).start()\n}\n\n/**\n   * Call this to trigger heap analysis manually, e.g. from\n   * a help button.\n   *\n   * This method returns a `HeapAnalysisJob` on which you can\n   * call `HeapAnalysisJob.cancel()` at any time.\n   */\nfun triggerHeapAnalysisNow(): HeapAnalysisJob {\nval job = analysisClient.newJob()\nanalysisExecutor.execute {\nval result = job.execute()\nanalysisCallback(result)\n}\nreturn job\n}\n}\n</code></pre> <p>The Bugsnag uploader:</p> <pre><code>class BugsnagHeapAnalysisUploader(applicationContext: Application) {\n\nprivate val bugsnagClient: Client\n\ninit {\nbugsnagClient = Client(\napplicationContext,\nBUGSNAG_API_KEY,\nDO_NOT_ENABLE_EXCEPTION_HANDLER\n)\nbugsnagClient.setSendThreads(false)\n}\n\nfun upload(heapAnalysis: HeapAnalysis) {\nwhen (heapAnalysis) {\nis HeapAnalysisSuccess -&gt; {\nval exception = HeapAnalysisReport()\nbugsnagClient.notify(exception) { report -&gt;\nval metaData = report.error.metaData\nmetaData.addToTab(\"Heap Analysis\", \"result\", heapAnalysis.toString())\n}\n}\nis HeapAnalysisFailure -&gt; {\n// Please file any reported failure to\n// https://github.com/square/leakcanary/issues\nbugsnagClient.notify(heapAnalysis.exception)\n}\n}\n}\n\n// Exception with fake unique stacktrace to send all reports to the same error entry.\nclass HeapAnalysisReport : Exception(\"Check the HEAP ANALYSIS tab\") {\noverride fun fillInStackTrace(): Throwable {\nstackTrace = arrayOf(\nStackTraceElement(\n\"HeapAnalysisReport\",\n\"analyzeHeap\",\n\"HeapAnalysisReport.kt\",\n1\n)\n)\nreturn this\n}\n}\n\ncompanion object {\nprivate const val BUGSNAG_API_KEY = YOUR_BUGSNAG_API_KEY\nprivate const val DO_NOT_ENABLE_EXCEPTION_HANDLER = false\n}\n}\n</code></pre>"},{"location":"changelog/#more-leak-fixes-in-plumber","title":"More leak fixes in Plumber","text":"<p>We added 3 new automatic fixes for known AOSP leaks in <code>plumber-android</code> (details: #1993). As a reminder, <code>plumber-android</code> is automatically included when you add <code>leakcanary-android</code>, and you can add it manually for build types that don\u2019t include LeakCanary:</p> <pre><code>dependencies {\n  // leakcanary-android adds plumber-android to debug builds\n  debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.6'\n\n  // This adds plumber-android to all build types\n  implementation 'com.squareup.leakcanary:plumber-android:2.6'\n}\n</code></pre>"},{"location":"changelog/#bug-fixes-and-improvements_1","title":"Bug fixes and improvements \ud83d\udc1b\ud83d\udd28","text":"<ul> <li>#1948 Leakcanary is now compiled against Kotlin 1.4 (while staying 1.3 compatible) to support Functional (SAM) interfaces.</li> <li>#1956 The retained object size is displayed as a human readable output (KB, MB, \u2026).</li> <li>#1976 Improved default object inspectors and leak finders for <code>View</code> and <code>Context</code>.</li> <li>#1972 Fields are printed with the parent class name that holds the field in leak traces.</li> <li>#1981 Fixed StrictMode policy violation (main thread read from disk).</li> <li>#1977 Report objects that are not strongly reachable.</li> <li>#2018 &amp; #2019 Fixed crashes in LeakCanary UI (discovered by Monkey tests).</li> <li>#2015 Fixed crash on Android &lt; 16.</li> <li>#2023 Fixed crash in plugin projects.</li> </ul> <p>For more details, see the 2.6 Milestone and the full diff.</p>"},{"location":"changelog/#version-25-2020-10-01","title":"Version 2.5 (2020-10-01)","text":"<p>Please thank @Amokrane, @Armaxis, @askont, @chao2zhang, @daniil-shevtsov, @eygraber, @msfjarvis, @mzgreen, @lchen8, @rpattabi, @sahil2441, @SylvainGirod, @vhow for their contributions, bug reports and feature requests \ud83d\ude4f \ud83d\ude4f \ud83d\ude4f.</p>"},{"location":"changelog/#heap-analysis-is-twice-as-fast","title":"Heap analysis is twice as fast \ud83d\udc24\ud83d\udca8","text":"<p>No one asked, so we delivered! We rewrote several core components in Shark (LeakCanary\u2019s heap analyzer) to dramatically reduce IO reads and allocations while keeping memory constant. More details on Twitter: thread by @ArtemChubaryan and thread by @Piwai.</p>"},{"location":"changelog/#compute-retained-size-within-the-leak-trace","title":"Compute retained size within the leak trace","text":"<p>Previously, LeakCanary computed the retained size for the leaking object (the last object in the leak trace). However, the bad reference causing objects to leak is often higher up in the leak trace and everything that it holds onto is actually leaking. So LeakCanary now computes the retained size for all the objects in the leaktrace that have a LEAKING or UNKNOWN status:</p> <pre><code>\u252c\u2500\u2500\u2500\n\u2502 GC Root: System class\n\u2502\n\u251c\u2500 com.example.MySingleton class\n\u2502    Leaking: NO (a class is never leaking)\n\u2502    \u2193 static MySingleton.leakedView\n\u2502                         ~~~~~~~~~~\n\u251c\u2500 android.widget.TextView instance\n\u2502    Leaking: YES (View.mContext references a destroyed activity)\n\u2502    Retaining 46326 bytes in 942 objects\n\u2502    \u2193 TextView.mContext\n\u2570\u2192 com.example.MainActivity instance\n\u200b     Leaking: YES (Activity#mDestroyed is true)\n\u200b     Retaining 1432 bytes in 36 objects\n</code></pre>"},{"location":"changelog/#disable-leakcanary-from-the-ui","title":"Disable LeakCanary from the UI","text":"<p>New toggle to disable heap dumping, which can be useful for QA, or when doing a product demo. LeakCanary will still show a notification when an object is retained.</p> <p></p>"},{"location":"changelog/#deobfuscating-hprof-files","title":"Deobfuscating hprof files","text":"<p>The Shark CLI can now deobfuscate heap dumps:</p> <pre><code>brew install leakcanary-shark\n\nshark-cli --hprof heapdump.hprof -m mapping.txt deobfuscate-hprof\n</code></pre>"},{"location":"changelog/#bug-fixes-and-improvements_2","title":"Bug fixes and improvements \ud83d\udc1b\ud83d\udd28","text":"<ul> <li>Heap analysis text results now wrap to a max width when sharing them from the LeakCanary activity or printing to logcat. This will make it harder to miss details that are lost at the end of long lines of text.</li> <li>The <code>leak_canary_watcher_auto_install</code>, <code>leak_canary_allow_in_non_debuggable_build</code> and <code>leak_canary_plumber_auto_install</code> resource booleans were meant to be public.</li> <li>We sprinkled a few <code>@JvmStatic</code> to help Java consummers.</li> <li>Fixed crash when no browser installed.</li> <li>Use distinct group for LeakCanary notifications.</li> <li>The heap analysis result now includes the heap dump duration because it looks like Android 11 heap dumps are sometimes super slow. We also added more perf related metrics.</li> <li>Disable logging when AppWatcher runs in release builds.</li> <li>Highlight library leak patterns directly within the leak traces.</li> <li>Improved inspections for Context, View and ContextImpl.</li> </ul> <p>For more details, see the 2.5 Milestone and the full diff.</p>"},{"location":"changelog/#version-24-2020-06-10","title":"Version 2.4 (2020-06-10)","text":"<p>Please thank @0x109, @andersu, @antoniomerlin, @bishiboosh, @ckesc, @jrodbx, @LouisCAD, @marcardar, @OlivierGenez, @pyricau, @runningcode, @seljad, @worldsnas for their contributions, bug reports and feature requests.</p>"},{"location":"changelog/#plumber-android-is-a-new-artifact-that-fixes-known-android-leaks","title":"<code>plumber-android</code> is a new artifact that fixes known Android leaks \ud83d\udebd\ud83d\udd27","text":"<p>LeakCanary reports all leaks, including leaks caused by a known bug in 3rd party code that you do not have control over (reported as Library leaks). That can be annoying! LeakCanary now ships with a new dependency, <code>plumber-android</code>, which performs hacks at runtime to fix some of these known leaks. This releases has fixes for 11 known leaks, but this is just the beginning. Contributions welcome! \ud83d\ude4f</p> <p>Note that since the <code>leakcanary-android</code> dependency is usually added as a <code>debugImplementation</code> dependency, the <code>plumber-android</code> is transitively added only in debug builds, so it will not fix leaks in your release builds. You can add the dependency directly as <code>implementation</code> to get these fixes in release builds as well:</p> <pre><code>dependencies {\nimplementation 'com.squareup.leakcanary:plumber-android:2.4'\n}\n</code></pre> <p>Warning</p> <p>While several of these fixes already ship in release builds of Square apps, this is the first official release of <code>plumber-android</code>, so you should consider it experimental.</p>"},{"location":"changelog/#analyzing-leaks-from-the-cli-is-easier-than-ever","title":"Analyzing leaks from the CLI is easier than ever \ud83c\udf7a","text":"<p>The Shark CLI can now be installed via Homebrew</p> <pre><code>brew install leakcanary-shark\n</code></pre> <p>You can then look for leaks in apps on any connected device, for example:</p> <pre><code>$ shark-cli --device emulator-5554 --process com.example.app.debug analyze\n</code></pre>"},{"location":"changelog/#support-for-android-test-orchestrator","title":"Support for Android Test Orchestrator \ud83c\udfbc","text":"<p>If you set up LeakCanary to report test failures when detecting leaks in instrumentation tests, it now works with Android Test Orchestrator as well. No change required, LeakCanary will automatically detect thatAndroid Test Orchestrator is running and hook into it.</p>"},{"location":"changelog/#no-more-master-branch","title":"No more <code>master</code> branch","text":"<p>The branch name <code>master</code> comes from the master / slave terminology. We renamed the default branch to <code>main</code>, a small step towards making the LeakCanary community a safer space. Here\u2019s a good thread on this topic.</p>"},{"location":"changelog/#bug-fixes-and-improvements_3","title":"Bug fixes and improvements \ud83d\udc1b\ud83d\udd28","text":"<ul> <li>URLs in Library Leak descriptions are now clickable</li> <li>Fixed ordering issues causing improper config with manual setup. A related change is that <code>AppWatcher.Config.enabled</code> is now deprecated.</li> <li>Fixed possible OutOfMemoryError failure when computing retained size: we were loading to memory large arrays from the heap dump just to get their size.</li> </ul> <p>For more details, see the 2.4 Milestone and the full diff.</p>"},{"location":"changelog/#version-23-2020-04-08","title":"Version 2.3 (2020-04-08)","text":"<p>This is a minor release on the feature front, but a large release on the documentation front!</p> <p>Many thanks to @adamfit, @Amokrane, @Armaxis, @artnc, @burakeregar, @ClaasJG, @clementcontet, @ckesc, @cketti, @fbenbassat, @Guneetgstar, @Igorxp5, @JLLeitschuh, @KidAndroid, @ligi, @mzgreen, @pyricau, @sprintuu, @tevjef, @thrlr123 for the contributions, bug reports and feature requests.</p> <p>We asked for help and immediately started seeing more contributions. Thanks all! Check out the How to help page.</p>"},{"location":"changelog/#leakcanary-will-now-crash-in-release-builds","title":"LeakCanary will now crash in release builds","text":"<p>Despite the documentation insisting on using <code>debugImplementation</code>, we\u2019ve seen apps ship LeakCanary in release builds. Mistakes happen, so we\u2019ve made that mistake harder to miss by making LeakCanary crash when included in release builds.</p> <p>Learn More: LeakCanary in release builds.</p>"},{"location":"changelog/#doc-site","title":"Doc site \ud83d\udec0\ud83d\udca5","text":"<p>The doc site content has changed quite a bit! We applied advice from Google\u2019s tech writing guide. If you\u2019ve been confused by Library Leaks before, check out see the new Categorizing leaks section. Take a look around, let us know what you think.</p>"},{"location":"changelog/#bug-fixes-and-improvements_4","title":"Bug fixes and improvements \ud83d\ude09","text":"<ul> <li>The new deobfuscation Gradle plugin wasn\u2019t working with Gradle 3.6, this is now fixed. Also removed the requirement for the plugin to be applied after AGP.</li> <li>Fixed 2 crashes (#1768 &amp; #1769) in the LeakCanary UI found by a sneaky monkey runner \ud83d\ude48.</li> <li>The LeakCanary UI updates immediately when a heap analysis is added or deleted.</li> <li>Fixed a crash when updating from LeakCanary 2.0.</li> <li>The About section of the LeakCanary now surfaces whether heap dumping is currently enabled.</li> <li>Fixed process not exiting in SharkCLI on Windows.</li> <li>Improved error message when obfuscation mappings appear to be missing.</li> </ul> <p>For more details, see the 2.3 Milestone and the full diff.</p>"},{"location":"changelog/#version-22-2020-02-05","title":"Version 2.2 (2020-02-05)","text":"<p>We\u2019ve got some good stuff for the first release of the decade!</p> <p>Many thanks to @AndroidInternal, @Armaxis, @lic2050, @mzgreen, @orenktaboola, @personshelldon, @Plastix, @pyricau for the contributions, bug reports and feature requests.</p>"},{"location":"changelog/#viewmodel-leak-detection","title":"ViewModel leak detection","text":"<p>Android ViewModels are really cool! Their lifecycle is much nicer than fragments or activities, but sometimes mistakes happen. LeakCanary will now automatically detect ViewModel leaks and report any ViewModel instance retained after its <code>onCleared()</code> method was called.</p>"},{"location":"changelog/#android-tv","title":"Android TV","text":"<p>LeakCanary is finally coming to big screens near you! Best part - no additional setup is required, just enable it like you would for a mobile device. Now whenever there\u2019s a leak - you will see a helpful Toast appear with all the details. Make sure to check out our new Android TV section and chill!</p>"},{"location":"changelog/#java-friendly-config-builders","title":"Java-friendly Config builders","text":"<p>It was brought to our attention that configuring <code>LeakCanary</code> and <code>AppWatcher</code> was a miserable experience from Java code. Well, not anymore!</p> <p>Now you can use <code>LeakCanary.Config.Builder</code> and <code>AppWatcher.Config.Builder</code> to have idiomatic Java when updating the configurations. For example:</p> <pre><code>LeakCanary.Config config = LeakCanary.getConfig().newBuilder()\n  .retainedVisibleThreshold(3)\n  .computeRetainedHeapSize(false)\n  .build();\nLeakCanary.setConfig(config);\n</code></pre> <p>If you notice any other problems when using LeakCanary from Java, please file an issue! We take Java-interop seriously and will be happy to improve LeakCanary\u2019s API!</p> <p>For more details, see the 2.2 Milestone and the full diff.</p>"},{"location":"changelog/#version-21-2019-12-31","title":"Version 2.1 (2019-12-31)","text":"<p>A special New Year\u2019s Eve release \ud83e\udd73, the next release will be in another decade \ud83d\ude0e!</p> <p>Many thanks to @adamfit, @alexander-smityuk, @Armaxis, @BraisGabin, @devism, @ditclear, @jrodbx, @jstefanowski, @Maragues, @mzgreen, @pyricau for the contributions, bug reports and feature requests.</p>"},{"location":"changelog/#a-gradle-plugin-for-obfuscated-apps","title":"A Gradle plugin for obfuscated apps","text":"<p>It\u2019s fairly common for teams to have a QA build that is tested before making the release build. Usually that build will be obfuscated (via Proguard or R8), but also add LeakCanary to detect leaks during QA. This leads to obfuscated leak traces, which are hard to understand \ud83e\udd2f. Check out our new Gradle deobfuscation plugin and rejoice!</p>"},{"location":"changelog/#ui-twix-tweaks","title":"UI twix tweaks","text":"<p>In 2.0 we changed the LeakCanary UI and UX, and built a foundation on which 2.1 extends.</p> <p></p> <ul> <li>Since 2.0, Leaks are grouped by their distinct signature. In 2.1 there\u2019s a <code>New</code> tag that will show until you open up a leak. There\u2019s also a <code>Library Leak</code> tag for leaks that are known to be caused by a bug in the Android Framework or Google libraries, and the library leak description now shows up in the UI.</li> <li>The type of the Java objects (class, instance, array) is now displayed in the LeakTrace, e.g. see <code>FontsContract class</code> and <code>ExampleApplication instance</code> above.</li> <li>The type of the GC root now shows up at the root of the leak trace. Makes sense!</li> <li>The leak result notification has an importance now set to MAX so that it\u2019ll show up right in your face. If you turn it off, the canary will haunt you in your dreams \ud83d\udc24\ud83d\udc7b. To save your sanity and your device battery, automatic heap dumps now won\u2019t happen more often than once per minute.</li> <li>The resource id name for <code>View</code> instances is now displayed in the leak trace. You shouldn\u2019t look at the implementation.</li> </ul> <pre><code>\u251c\u2500 android.widget.TextView instance\n\u2502    View.mID = R.id.helper_text\n</code></pre>"},{"location":"changelog/#documentation-goodies","title":"Documentation goodies","text":"<ul> <li>The Fundamentals page was entirely rewritten, split into 3 pages and moved to its own tab. Please read it and provide feedback!</li> <li>At Square, we have been uploading leaks to Bugsnag for 3 years now, so that no leak ever gets missed. Follow this recipe!</li> <li>Did you know you can run LeakCanary in a JVM?</li> </ul>"},{"location":"changelog/#api-breaking-bettering-changes","title":"API breaking bettering changes","text":"<ul> <li>The APIs of the <code>Leak</code> and <code>LeakTrace</code> classes have significantly changed, e.g. all <code>LeakTrace</code> instances with an identical signature are grouped under the same Leak object. Despite these breaking changes, this release version is a minor update. Oh noes, what about semantic versioning \ud83d\ude31? Ask Don Quixote.</li> <li>You can now customize the way LeakCanary finds the leaking objects in the heap dump. For example, here\u2019s the configuration SharkCli uses to find leaks in heap dumps of apps that don\u2019t even have the LeakCanary dependency:</li> </ul> <pre><code>LeakCanary.config = LeakCanary.config.copy(\nleakingObjectFinder = FilteringLeakingObjectFinder(\nAndroidObjectInspectors.appLeakingObjectFilters\n)\n)\n</code></pre> <ul> <li>LeakCanary automatically disables itself in tests by detecting that the <code>org.junit.Test</code> is in the classpath. Unfortunately, some apps ship Junit in their app debug classpath (e.g. when using OkHttp MockWebServer). You can now customize which class is used to detect tests:</li> </ul> <pre><code>&lt;resources&gt;\n&lt;string name=\"leak_canary_test_class_name\"&gt;assertk.Assert&lt;/string&gt;\n&lt;/resources&gt;\n</code></pre>"},{"location":"changelog/#interactive-cli","title":"Interactive CLI","text":"<p>Shark CLI was rewritten on top of Clikt:</p> <pre><code>$ shark-cli\nUsage: shark-cli [OPTIONS] COMMAND [ARGS]...\n\n                 ^`.                 .=\"\"=.\n ^_              \\  \\               / _  _ \\\n\\ \\             {   \\             |  d  b  |\n{  \\           /     `~~~--__     \\   /\\   /\n {   \\___----~~'              `~~-_/'-=\\/=-'\\,\n  \\                         /// a  `~.      \\ \\\n  / /~~~~-, ,__.    ,      ///  __,,,,)      \\ |\n  \\/      \\/    `~~~;   ,---~~-_`/ \\        / \\/\n                   /   /            '.    .'\n                  '._.'             _|`~~`|_\n                                    /|\\  /|\\\n\nOptions:\n  -p, --process NAME              Full or partial name of a process, e.g.\n                                  \"example\" would match \"com.example.app\"\n-d, --device ID                 device/emulator id\n  -m, --obfuscation-mapping PATH  path to obfuscation mapping file\n  --verbose / --no-verbose        provide additional details as to what\n                                  shark-cli is doing\n  -h, --hprof FILE                path to a .hprof file\n  --help                          Show this message and exit\n\nCommands:\n  interactive   Explore a heap dump.\n  analyze       Analyze a heap dump.\n  dump-process  Dump the heap and pull the hprof file.\n  strip-hprof   Replace all primitive arrays from the provided heap dump with\n                arrays of zeroes and generate a new \"-stripped.hprof\" file.\n</code></pre> <p>There\u2019s a new <code>interactive</code> command which enables exploring the heap dump from the command line:</p> <pre><code>$ shark-cli -h heapdump.hprof interactive\nEnter command [help]:\nhelp\n\nAvailable commands:\n  analyze                   Analyze the heap dump.\n  class NAME@ID             Show class with a matching NAME and Object ID.\n  instance CLASS_NAME@ID    Show instance with a matching CLASS_NAME and Object\nID.\n  array CLASS_NAME@ID       Show array instance with a matching CLASS_NAME and\nObject ID.\n  -&gt;instance CLASS_NAME@ID  Show path from GC Roots to instance.\n  ~&gt;instance CLASS_NAME@ID  Show path from GC Roots to instance, highlighting\nsuspect references.\n  help                      Show this message.\n  exit                      Exit this interactive prompt.\n</code></pre> <p>We\u2019re currently exploring the idea of adding support for SQL queries, feedback welcome!</p> <p>For more details, see the 2.1 Milestone and the full diff.</p>"},{"location":"changelog/#version-20-2019-11-27","title":"Version 2.0 (2019-11-27)","text":"<p>In the past 7 months, LeakCanary went through 3 alphas and 5 betas, encompassing 23 contributors over 493 commits, 35826 insertions and 10156 deletions.</p>"},{"location":"changelog/#should-i-upgrade","title":"Should I upgrade?","text":"<p>YES! LeakCanary 2 is so much better, it might make you excited when you see a new memory leak. Follow the upgrade guide, you won\u2019t regret it!</p>"},{"location":"changelog/#so-whats-changed-since-163","title":"So, what\u2019s changed since 1.6.3?","text":"<p>Everything. The LeakCanary codebase went from ~6000 lines of Java to ~16000 lines of Kotlin, excluding comments &amp; blanks.</p> <p>Isn\u2019t Kotlin supposed to drastically reduce the amount of boilerplate code?</p> <p>Absolutely! And it did. But then, we wrote more code. LeakCanary used to depend on HAHA, a repackaging of perflib, the heap dump parser used by Android Studio. Unfortunately perflib was slow and used too much memory, so LeakCanary now includes its own heap dump parser: Shark. The extra code comes from Shark, but also from having a lot more automated tests, and an improved UI layer.</p> <p>One major difference: when the app is in foreground, LeakCanary 2 will not trigger on every retained instance. Instead it will wait until the app goes in background or to reach a threashold of 5 retained instances in foreground. The analysis will then find all the leaks at once, and group identical leaks in the results UI. Please read the Fundamentals section to learn more!</p>"},{"location":"changelog/#random-facts","title":"Random facts","text":"<ul> <li>You can customize the Leaks launcher icon and label: learn more here.</li> <li>If you ` press on your main activity launcher icon, you should see a LeakCanary dynamic shortcut. You can then long press that to drop it on your home screen, and the launcher shows that it\u2019s the leaks launcher for your app.</li> <li>Out of the box, LeakCanary tracks all fragments flavors: AOSP, Support Library and Android X.</li> <li>From within the leak screen, you can share a leak to stack overflow. You can also share a heap dump, or import and analyze a heap dump from another device.</li> <li>You can run LeakCanary from your computer command line, on any debuggable app even if that app doesn\u2019t have LeakCanary: learn more here.</li> <li>The new documentation is fully searchable and includes the API documentation. Try the search bar \u2934.</li> <li>A large 160Mb heap dump uses 2Gb memory when opening it in Android Studio, but only 40Mb with Shark.</li> </ul>"},{"location":"changelog/#changes-since-20-beta-5","title":"Changes since 2.0 Beta 5","text":"<ul> <li>Shark CLI supports multiple connected devices #1642</li> <li>Fixed missing sources from Maven Central #1643</li> <li>Updated notification icon to avoid confusion with Twitter DM notifications, and added icons to bottom navigation bar #1648</li> <li>Automatic leak detection for support library fragments #1611</li> </ul> <p>Many thanks to @AndreasBoehm, @jrodbx, @pyricau for the contributions, bug reports and feature requests.</p> <p>For more details, see the 2.0 Milestone and the full diff.</p>"},{"location":"changelog/#version-20-beta-5-2019-11-25","title":"Version 2.0 Beta 5 (2019-11-25)","text":"<ul> <li>Major bugfix: native gc roots were accidentally ignored in Beta 4, as a result some leaks were not found #1634</li> <li>Fixed Lint warning (<code>leak_canary_about_message</code> string triggered multiple substitutions warning) #1630</li> </ul> <p>Many thanks to @DanEdgarTarget, @msfjarvis, @PaulWoitaschek, @pyricau, @ZacSweers for the contributions, bug reports and feature requests.</p> <p>For more details, see the 2.0-beta-5 Milestone and the full diff.</p>"},{"location":"changelog/#version-20-beta-4-2019-11-18","title":"Version 2.0 Beta 4 (2019-11-18)","text":"<ul> <li>Improved string rendering for heap analysis results</li> <li>UX redesign #1445</li> <li>Support for pattern matching of native reference leaks #1562</li> <li>Added support for deobfuscation using Proguard mapping files in Shark #1499. This isn\u2019t directly supported in LeakCanary yet.</li> <li>Added support for extracting metadata from the heap dump (see the recipe) #1519</li> <li>Improved auto disabling of LeakCanary in Unit and UI tests #1552</li> <li>Several performance improvements when parsing heap dumps</li> <li>Fixed several bugs and crashes</li> <li>Added new known leak patterns</li> </ul> <p>Many thanks to @Armaxis, @BraisGabin, @bric3, @elihart, @fernandospr, @flickator, @gabrysgab, @JorgeDLS, @lannyf77, @msfjarvis, @mzgreen, @ozmium, @PaulWoitaschek, @pyricau, @shelpy, @vRallev, @ZacSweers for the contributions, bug reports and feature requests.</p> <p>For more details, see the 2.0-beta-4 Milestone and the full diff.</p>"},{"location":"changelog/#version-20-beta-3-2019-08-22","title":"Version 2.0 Beta 3 (2019-08-22)","text":"<ul> <li>Baseline memory usage for large hprofs divided by 3 and removed memory spikes #1543</li> <li>Fixed crash when LeakCanary is initialized from another process #1529</li> <li>Java local references are deprioritized to look for longer alternative paths #1525</li> <li>Fixed <code>JavaLocalPattern</code> not matching on Lollipop #1524</li> </ul> <p>Many thanks to @Armaxis, @elihart, @emartynov, @hmcgreevy-instil, @pyricau for the contributions, bug reports and feature requests.</p> <p>For more details, see the 2.0-beta-3 Milestone and the full diff.</p>"},{"location":"changelog/#version-20-beta-2-2019-08-02","title":"Version 2.0 Beta 2 (2019-08-02)","text":"<ul> <li>Fixed Leak analysis failed: Object id not found in heap dump. #1516</li> <li>10x speed increase of hprof indexing on large heap dumps #1520</li> </ul> <p>Many thanks to @kolphi, @pyricau, @ZacSweers for the contributions, bug reports and feature requests.</p> <p>For more details, see the 2.0-beta-2 Milestone and the full diff.</p>"},{"location":"changelog/#version-20-beta-1-2019-07-30","title":"Version 2.0 Beta 1 (2019-07-30)","text":"<ul> <li>New standalone library! Shark is the heap analyzer that powers LeakCanary 2, and it can run in any Java VM. It comes with a CLI: you can now run <code>shark-cli analyze-process com.example.myapp</code> from your computer.</li> <li>New Heap Explorer directly on device! Open a Heap Analysis in LeakCanary, tap the options menu and select \u201cHeap Explorer\u201d. This is still experimental and not very user friendly, contributions welcome!</li> <li>Large API rewrite to improve usability. If you used the alpha with a customized configuration, there are breaking changes. Of note: LeakSentry became AppWatcher, RefWatcher became ObjectWatcher, AndroidExcludedRefs became AndroidReferenceMatchers, AnalysisResultListener became OnHeapAnalyzedListener, AndroidLeakTraceInspectors became AndroidObjectInspectors.</li> <li>The entire API surface is now documented and the documentation is available on this website: see the LeakCanary API tab at the top.</li> <li>Removed the dependency on Android X. No more configuration issues! #1462</li> <li>Added Proguard rules for LeakCanary and ObjectWatcher. #1500</li> <li>Display LeakCanary version in the About screen. #1448</li> <li>Bug fixes, new reference matchers and object inspectors</li> </ul> <p>Many thanks to @arctouch-carlosottoboni, @jemaystermind, @kushagrakumar27, @pyricau, @snkashis for the contributions, bug reports and feature requests.</p> <p>For more details, see the 2.0-beta-1 Milestone and the full diff.</p>"},{"location":"changelog/#version-20-alpha-3-2019-07-04","title":"Version 2.0 Alpha 3 (2019-07-04)","text":"<ul> <li>#1401 LeakCanary can now import all hprof files created from prior LeakCanary versions.</li> <li>#1414 New API: <code>RefWatcher.retainedInstances</code> which returns the instances that are currently considered retained.</li> <li>#1419 New APIs: <code>LeakCanary.Config.maxStoredHeapDumps</code> (default 7) and <code>LeakCanary.Config.requestWriteExternalStoragePermission</code> (default false). LeakCanary won\u2019t ask for the external storage permission anymore by default.</li> <li>#1338 API change: <code>LeakCanary.Config.exclusionsFactory</code> replaced with <code>LeakCanary.Config.knownReferences</code> (simpler use), <code>LeakCanary.Config.leakInspectors</code> and <code>LeakCanary.Config.labelers</code> merged into <code>LeakCanary.Config.leakTraceInspectors</code> which provides access to the entire leak trace as well as a new graph oriented API that replaces the low level hprof parser API.</li> <li>#1382 LeakCanary now disables automatic heap dumping when running in AndroidX UI tests.</li> <li>#1424 API rename: <code>RefWatcher.hasRetainedReferences</code> =&gt; <code>RefWatcher.hasRetainedInstances</code>, <code>RefWatcher.retainedReferenceCount</code> =&gt; <code>RefWatcher.retainedInstanceCount</code>, <code>RefWatcher.hasWatchedReferences</code> =&gt; <code>RefWatcher.hasWatchedInstances</code>, <code>RefWatcher.removeKeysRetainedBeforeHeapDump</code> =&gt; <code>RefWatcher.removeInstancesRetainedBeforeHeapDump</code>, <code>RefWatcher.clearWatchedReferences</code> =&gt; <code>RefWatcher.clearWatchedInstances</code>.</li> <li>#1432 #1438 #1440 New \u201cwon\u2019t fix\u201d leaks and leak trace inspectors</li> <li>#1374 #1364 #1366 #1417 #1399 #1416 #1407 #1427 #1385 Bug and crash fixes</li> </ul> <p>Many thanks to @1step2hell, @afollestad, @ansman, @bjdodson, @BraisGabin, @EBfVince, @jaredsburrows, @pforhan, @pyricau, @tellypresence, @wiyarmir for the contributions, bug reports and feature requests.</p> <p>For more details, see the 2.0-alpha-3 Milestone and the full diff.</p>"},{"location":"changelog/#version-20-alpha-2-2019-05-21","title":"Version 2.0 Alpha 2 (2019-05-21)","text":"<ul> <li>#1040 Import and analyze hprof files from other devices</li> <li>#1344 Computing retained size</li> <li>#1325 New notification showing current count of retained instances</li> <li>#1079 \u201cExcluded\u201d leaks have been renamed to \u201cWon\u2019t fix\u201d leaks to clarify meaning.</li> <li>#1328 New leaks are called out in the UI.</li> <li>#1327 LeakSentry can be enabled / disabled and is automatically disabled in non debuggable builds.</li> <li>#1173 Experimental: now reporting leaks that only go through weak references (previously reported as \u201cno path to instance\u201d)</li> <li>#1339 Readded support for Thread name based exclusions</li> <li>#1312 Fixed bug causing LeakCanary to stop detecting leaks after the app is killed.</li> <li>#1310 #1313 #1314 #1340 #1337 Many API changes</li> <li>#1296 #1293 #1306 #1336 Fixed several crashes.</li> </ul> <p>Many thanks to @forrestbice, @Foso, @Goddchen, @marcosholgado, @orionlee, @pyricau, @satoshun, @ZacSweers for the contributions!</p> <p>For more details, see the 2.0-alpha-2 Milestone and the full diff.</p>"},{"location":"changelog/#version-20-alpha-1-2019-04-23","title":"Version 2.0 Alpha 1 (2019-04-23)","text":"<ul> <li>New logo, thanks @flickator!</li> <li>Entirely rewritten to 100% Kotlin</li> <li>Multiple leaks detected in one analysis<ul> <li>The heap is dumped when the app goes in the background, or when a minimum of 5 leaks is reached in the foreground.</li> </ul> </li> <li>Leak grouping<ul> <li>Leaks that share similar causes are grouped in the UI.</li> <li>New screens to see the list of groups and each group.</li> <li>Improved leaktrace strings to highlight leak causes.</li> <li>Leaks can be shared to Stack Overflow</li> </ul> </li> <li>New library: LeakSentry.<ul> <li>Detects when objects are leaking and triggers LeakCanary</li> <li>Can be used independently in production, for instance to report the number of leaking instances on an OutOfMemoryError crash.</li> </ul> </li> <li>New heap parser<ul> <li>Uses 90% less memory and 6 times faster than the prior heap parser.</li> <li>Runs in the same process as the app on a low priority thread.</li> <li>No more dependency on Perflib and TroveJ. New dependency on Okio.</li> <li>The old parser is still available as <code>leakcanary-android-perflib</code> but will be removed after alpha.</li> </ul> </li> <li>Labelers can add any string content to leak elements</li> <li>0 code setup, just add the one debug dependency.</li> <li>Simpler configuration options</li> <li>Updated from support library to Android X</li> </ul> <p>Many thanks to @BraisGabin, @colinmarsch, @jrodbx, @flickator, @JakeWharton, @pyricau, @WhatsEmo for the contributions!</p> <p>For more details, see the 2.0-alpha-1 Milestone and the full diff.</p>"},{"location":"changelog/#version-163-2019-01-10","title":"Version 1.6.3 (2019-01-10)","text":"<ul> <li>#1163 Fixed leaks being incorrectly classified as \u201cno leak\u201d due to missed GC Roots.</li> <li>#1153 <code>LeakCanary.isInAnalyzerProcess</code> now correctly returns true in the analyzer process prior to any first leak (could be triggered by starting the leak result activity).</li> <li>#1158 Stopped enabling DisplayLeakActivity when not using DisplayLeakService.</li> <li>#1135 Fixed IndexOutOfBoundsException for leak traces of size 1.</li> <li>#1163 Keep \u201cno leak\u201d heap dumps.</li> </ul> <p>Many thanks to @KMaragh, @pyricau, @SebRut for the code contributions!</p> <p>For more details, see the 1.6.3 Milestone and the full diff.</p>"},{"location":"changelog/#version-162-2018-10-16","title":"Version 1.6.2 (2018-10-16)","text":"<ul> <li>#1067 Fixed TransactionTooLargeException crash (leak analysis would never complete).</li> <li>#1061 Detection of Fragment view leaks after Fragment#onDestroyView().</li> <li>#1076 Added the FOREGROUND_SERVICE permission for Android P.</li> <li>#1062 The LeakCanary toast now always shows correctly. It doesn\u2019t show if there is no activity in foreground.</li> <li>#1115 Reenabled the DisplayLeakActivity icon on fresh installs.</li> <li>#1100 Added nullability annotations to improve Kotlin support.</li> <li>Updates to excluded leaks (commits).</li> <li>Updates to reachability inspectors (commits).</li> </ul> <p>Many thanks to @fractalwrench, @ZacSweers, @Goddchen, @igokoro, @IlyaGulya, @JakeWharton, @javmarina, @jokermonn, @jrodbx, @Parseus, @pyricau, @scottkennedy for the code contributions!</p>"},{"location":"changelog/#public-api-changes","title":"Public API changes","text":"<ul> <li>Subclasses of <code>AbstractAnalysisResultService</code> should now override <code>onHeapAnalyzed(@NonNull AnalyzedHeap analyzedHeap)</code> instead of <code>onHeapAnalyzed(@NonNull HeapDump heapDump, @NonNull AnalysisResult result)</code></li> </ul> <p>For more details, see the 1.6.2 Milestone and the full diff.</p>"},{"location":"changelog/#version-161-2018-06-21","title":"Version 1.6.1 (2018-06-21)","text":"<ul> <li>#727 Improved leak analysis: LeakCanary now identifies and highlights the potential causes of the leak.</li> <li>#1011 We noticed that computing the retained heap size could take a long time, so it\u2019s now optional and off by default.</li> <li>#633 Support for detecting leaks in instrumentation tests (see the wiki).</li> <li>#985 Ability to convert leak traces into stack traces for easy remote reporting (see the wiki).</li> <li>#983 Support for watching destroyed Fragments.</li> <li>#846 LeakCanary now uses foreground services and displays a notification when the analysis is in progress. This also fixes crashes when analyzing in background on O+.</li> <li>The LeakCanary icon (to start to DisplayLeakActivity) is now hidden by default, and only enabled after the first leak is found.</li> <li>#775 Fixed crash when sharing heap dumps on O+ and added a dependency to the support-core-utils library.</li> <li>#930 DisplayLeakActivity has a responsive icon.</li> <li>#685 Stopped doing IO on main thread in DisplayLeakActivity (fixes StrictMode errors).</li> <li>#999 Updated HAHA to 2.0.4, which uses Trove4j as an external dependency (from jcenter) instead of rebundling it. This is to clarify licences (Apache v2 vs LGPL 2.1).</li> <li>Several bug and crash fixes.</li> </ul> <p>Many thanks to @AdityaAnand1, @alhah, @christxph, @csoon03, @daqi, @JakeWharton, @jankovd, @jrodbx, @kurtisnelson, @NightlyNexus, @pyricau, @SalvatoreT, @shmuelr, @tokou, @xueqiushi  for the code contributions!</p> <p>Note: we made a 1.6 release but quickly followed up with 1.6.1 due to #1058.</p>"},{"location":"changelog/#public-api-changes_1","title":"Public API changes","text":"<ul> <li>The installed ref watcher singleton is now available via <code>LeakCanary.installedRefWatcher()</code></li> <li><code>AnalysisResult.leakTraceAsFakeException()</code> returns an exception that can be used to report and group leak traces to a tool like Bugsnag or Crashlytics.</li> <li>New <code>InstrumentationLeakDetector</code> and <code>FailTestOnLeakRunListener</code> APIs for detecting leaks in instrumentation tests.</li> <li>New <code>Reachability.Inspector</code> and <code>RefWatcherBuilder.stethoscopeClasses()</code> API to establish reachability and help identify leak causes.</li> <li>Watching activities can be disabled with <code>AndroidRefWatcherBuilder.watchActivities(false)</code>, watching fragments can be disabled with <code>AndroidRefWatcherBuilder.watchFragments(false)</code></li> <li><code>LeakCanary.setDisplayLeakActivityDirectoryProvider()</code> is deprecated and replaced with <code>LeakCanary.setLeakDirectoryProvider()</code></li> <li>New <code>RefWatcherBuilder.computeRetainedHeapSize()</code> API to enable the computing of the retained heap size (off by default).</li> </ul> <p>For more details, see the 1.6.1 Milestone and the full diff.</p>"},{"location":"changelog/#version-154-2017-09-22","title":"Version 1.5.4 (2017-09-22)","text":"<ul> <li>Restore Java 7 compatibility in leakcanary-watcher</li> </ul>"},{"location":"changelog/#version-153-2017-09-17","title":"Version 1.5.3 (2017-09-17)","text":"<ul> <li>Fix broken 1.5.2 build</li> <li>Convert leakcanary-watcher from Android library to Java library</li> <li>Disable finish animations in RequestStoragePermissionActivity</li> <li>Corrected README sample for Robolectric tests</li> </ul> <p>For more details, see the full diff.</p>"},{"location":"changelog/#version-152-2017-08-09","title":"Version 1.5.2 (2017-08-09)","text":"<ul> <li>New excluded leaks</li> <li>Move Leakcanary UI into leak analyzer process</li> <li>Ignore computing retained sizes for bitmaps on O+</li> <li>Add notification channel for persistent messages on O+</li> <li>Exclude permission activity from recents menu</li> <li>Updated README and sample for handling Robolectric tests</li> </ul> <p>For more details, see the full diff.</p>"},{"location":"changelog/#version-151-2017-04-25","title":"Version 1.5.1 (2017-04-25)","text":"<ul> <li>New excluded leaks</li> <li>Fix java.util.MissingFormatArgumentException in DisplayLeakService</li> <li>Separate task affinities for different apps</li> <li>Bump minSdk to 14</li> <li>Fix HahaHelper for O Preview</li> </ul> <p>For more details, see the full diff.</p>"},{"location":"changelog/#version-15-2016-09-28","title":"Version 1.5 (2016-09-28)","text":"<ul> <li>New excluded leaks</li> <li>Added <code>LeakCanary.isInAnalyzerProcess()</code> to the no-op jar</li> <li>Fixed several file access issues:<ul> <li>No more cleanup on startup, we rotate the heap dump files on every new heap dump.</li> <li>LeakCanary now falls back to the app directory until it can write to the external storage.</li> </ul> </li> <li>Leak notifications now each use a distinct notification instead of erasing each other.</li> <li>If LeakCanary can\u2019t perform a heap dump for any reason (e.g. analysis in progress, debugger attached), it retries later with an exponential backoff.</li> <li>Added confirmation dialog when user deletes all leaks.</li> <li>Replace the two LeakCanary configuration methods with a builder that provides more flexibility, see <code>LeakCanary.refWatcher()</code>.</li> </ul> <p>For more details, see the full diff.</p>"},{"location":"changelog/#public-api-changes_2","title":"Public API changes","text":"<ul> <li>New <code>HeapAnalyzer.findTrackedReferences()</code> method for headless analysis when you have no context on what leaked.</li> <li>Added <code>LeakCanary.isInAnalyzerProcess()</code> to the no-op jar</li> <li>Added <code>LeakCanary.refWatcher()</code> which returns an <code>AndroidRefWatcherBuilder</code> that extends <code>RefWatcherBuilder</code> and lets you fully customize the <code>RefWatcher</code> instance.</li> <li>Removed <code>LeakCanary.install(Application, Class)</code> and <code>LeakCanary.androidWatcher(Context, HeapDump.Listener, ExcludedRefs)</code>.</li> <li>Removed <code>R.integer.leak_canary_max_stored_leaks</code> and <code>R.integer.leak_canary_watch_delay_millis</code>, those can now be set via <code>LeakCanary.refWatcher()</code>.</li> <li>Updated the <code>LeakDirectoryProvider</code> API to centralize all file related responsibilities.</li> <li><code>RefWatcher</code> is now constructed with a <code>WatchExecutor</code> which executes a <code>Retryable</code>, instead of an <code>Executor</code> that executes a <code>Runnable</code>.</li> <li><code>HeapDumper.NO_DUMP</code> was renamed <code>HeapDumper.RETRY_LATER</code></li> </ul>"},{"location":"changelog/#version-14-2016-09-11","title":"Version 1.4 (2016-09-11)","text":"<ul> <li>Fix false negative where GC root is of type android.os.Binder #482</li> <li>Update HAHA to 2.0.3; clear compiler warnings #563</li> <li>Correct some mistakes in German translation #516</li> <li>Don\u2019t loop when storage permission denied #422</li> <li>Remove old references to \u201c__\u201d prefixed resources #477</li> <li>Fix permission crash for DisplayLeakActivity on M #382</li> <li>Fix NPE when thread name not found in heap dump #417</li> <li>Add version info to stacktrace #473</li> </ul>"},{"location":"changelog/#version-14-beta2-2016-03-23","title":"Version 1.4-beta2 (2016-03-23)","text":"<ul> <li>Add reason for ignoring to analysis result #365.</li> <li>Lower memory usage when parsing heap dumps on M #223.</li> <li>Fix NPE in LeakCanaryInternals.isInServiceProcess() #449.</li> <li>New ignored Android SDK leaks #297,#322.</li> <li>Use leakcanary-android-no-op in test builds #143.</li> <li>Fixes to allow LeakCanary to work with ProGuard #398.</li> <li>Optimize png assets #406.</li> <li>Fix delete button not working on error views #408.</li> <li>Add German translation #437.</li> </ul>"},{"location":"changelog/#version-14-beta1-2016-01-08","title":"Version 1.4-beta1 (2016-01-08)","text":"<ul> <li>Switched to HAHA 2.0.2 with uses Perflib instead of MAT under the hood #219. This fixes crashes and improves speed a lot.</li> <li>We can now parse Android M heap dumps #267, although there are still memory issues (see #223).</li> <li>Excluded leaks are now reported as well and available in the display leak activity.</li> <li>Added ProGuard configuration for #132.</li> <li>Many new ignored Android SDK leaks.</li> <li>Added excluded leaks to text report #119.</li> <li>Added LeakCanary SHA to text report #120.</li> <li>Added CanaryLog API to replace the logger: #201.</li> <li>Renamed all resources to begin with <code>leak_canary_</code> instead of <code>__leak_canary</code>#161</li> <li>No crash when heap dump fails #226.</li> <li>Add retained size to leak reports #162.</li> </ul>"},{"location":"changelog/#public-api-changes_3","title":"Public API changes","text":"<ul> <li>AnalysisResult.failure is now a <code>Throwable</code> instead of an <code>Exception</code>. Main goal is to catch and correctly report OOMs while parsing.</li> <li>Added ARRAY_ENTRY to LeakTraceElement.Type for references through array entries.</li> <li>Renamed <code>ExcludedRefs</code> fields.</li> <li>Each <code>ExcludedRef</code> entry can now be ignored entirely or \u201ckept only if no other path\u201d.</li> <li>Added support for ignoring all fields (static and non static) for a given class.</li> </ul>"},{"location":"changelog/#version-131-2015-05-16","title":"Version 1.3.1 (2015-05-16)","text":"<ul> <li>Heap dumps and analysis results are now saved on the sd card: #21.</li> <li><code>ExcludedRef</code> and <code>AndroidExcludedRefs</code> are customizable: #12 #73.</li> <li>7 new ignored Android SDK leaks: #1 #4 #32 #89 #82 #97.</li> <li>Fixed 3 crashes in LeakCanary: #37 #46 #66.</li> <li>Fixed StrictMode thread policy violations: #15.</li> <li>Updated <code>minSdkVersion</code> from <code>9</code> to <code>8</code>: #57.</li> <li>Added LeakCanary version name to <code>LeakCanary.leakInfo()</code>: #49.</li> <li><code>leakcanary-android-no-op</code> is lighter, it does not depend on <code>leakcanary-watcher</code> anymore, only 2 classes now: #74.</li> <li>Adding field state details to the text leak trace.</li> <li>A Toast is displayed while the heap dump is in progress to warn that the UI will freeze: #20. You can customize the toast by providing your own layout named <code>__leak_canary_heap_dump_toast.xml</code> (e.g. you could make it an empty layout).</li> <li>If the analysis fails, the result and heap dump are kept so that it can be reported to LeakCanary: #102.</li> <li>Update to HAHA 1.3 to fix a 2 crashes #3 46</li> </ul>"},{"location":"changelog/#public-api-changes_4","title":"Public API changes","text":"<ul> <li>When upgrading from 1.3 to 1.3.1, previously saved heap dumps will not be readable any more, but they won\u2019t be removed from the app directory. You should probably uninstall your app.</li> <li>Added <code>android.permission.WRITE_EXTERNAL_STORAGE</code> to <code>leakcanary-android</code> artifact.</li> <li><code>LeakCanary.androidWatcher()</code> parameter types have changed (+ExcludedRefs).</li> <li><code>LeakCanary.leakInfo()</code> parameter types have changed (+boolean)</li> <li><code>ExcludedRef</code> is now serializable and immutable, instances can be created using <code>ExcludedRef.Builder</code>.</li> <li><code>ExcludedRef</code> is available in <code>HeapDump</code></li> <li><code>AndroidExcludedRefs</code> is an enum, you can now pick the leaks you want to ignore in <code>AndroidExcludedRefs</code> by creating an <code>EnumSet</code> and calling <code>AndroidExcludedRefs.createBuilder()</code>.</li> <li><code>AndroidExcludedRefs.createAppDefaults()</code> &amp; <code>AndroidExcludedRefs.createAndroidDefaults()</code> return a <code>ExcludedRef.Builder</code>.</li> <li><code>ExcludedRef</code> moved from <code>leakcanary-analyzer</code> to <code>leakcanary-watcher</code></li> </ul>"},{"location":"changelog/#version-13-2015-05-08","title":"Version 1.3 (2015-05-08)","text":"<p>Initial release.</p>"},{"location":"changelog/#dependencies","title":"Dependencies","text":""},{"location":"code_of_conduct/","title":"Open Source Code of Conduct","text":"<p>At Square, we are committed to contributing to the open source community and simplifying the process of releasing and managing open source software. We\u2019ve seen incredible support and enthusiasm from thousands of people who have already contributed to our projects\u200a\u2014\u200aand we want to ensure our community continues to be truly open for everyone.</p> <p>This code of conduct outlines our expectations for participants, as well as steps to reporting unacceptable behavior. We are committed to providing a welcoming and inspiring community for all and expect our code of conduct to be honored.</p> <p>Square\u2019s open source community strives to:</p> <ul> <li> <p>Be open: We invite anyone to participate in any aspect of our projects. Our community is    open, and any responsibility can be carried by a contributor who demonstrates the required    capacity and competence.</p> </li> <li> <p>Be considerate: People use our work, and we depend on the work of others. Consider users and    colleagues before taking action. For example, changes to code, infrastructure, policy, and    documentation may negatively impact others.</p> </li> <li> <p>Be respectful: We expect people to work together to resolve conflict, assume good intentions,    and act with empathy. Do not turn disagreements into personal attacks.</p> </li> <li> <p>Be collaborative: Collaboration reduces redundancy and improves the quality of our work. We    strive for transparency within our open source community, and we work closely with upstream    developers and others in the free software community to coordinate our efforts.</p> </li> <li> <p>Be pragmatic: Questions are encouraged and should be asked early in the process to avoid    problems later. Be thoughtful and considerate when seeking out the appropriate forum for your    questions. Those who are asked should be responsive and helpful.</p> </li> <li> <p>Step down considerately: Members of every project come and go. When somebody leaves or    disengages from the project, they should make it known and take the proper steps to ensure that    others can pick up where they left off.</p> </li> </ul> <p>This code is not exhaustive or complete. It serves to distill our common understanding of a collaborative, shared environment, and goals. We expect it to be followed in spirit as much as in the letter.</p>"},{"location":"code_of_conduct/#diversity-statement","title":"Diversity Statement","text":"<p>We encourage everyone to participate and are committed to building a community for all. Although we may not be able to satisfy everyone, we all agree that everyone is equal.</p> <p>Whenever a participant has made a mistake, we expect them to take responsibility for it. If someone has been harmed or offended, it is our responsibility to listen carefully and respectfully, and do our best to right the wrong.</p> <p>Although this list cannot be exhaustive, we explicitly honor diversity in age, culture, ethnicity, gender identity or expression, language, national origin, political beliefs, profession, race, religion, sexual orientation, socioeconomic status, and technical ability. We will not tolerate discrimination based on any of the protected characteristics above, including participants with disabilities.</p>"},{"location":"code_of_conduct/#reporting-issues","title":"Reporting Issues","text":"<p>If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com. For more details, please see our Reporting Guidelines below.</p>"},{"location":"code_of_conduct/#thanks","title":"Thanks","text":"<p>Some of the ideas and wording for the statements and guidelines above were based on work by the Twitter, Ubuntu, GDC, and Django communities. We are thankful for their work.</p>"},{"location":"code_of_conduct/#reporting-guide","title":"Reporting Guide","text":"<p>If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com. All reports will be handled with discretion.</p> <p>In your report please include:</p> <ul> <li>Your contact information.</li> <li>Names (real, nicknames, or pseudonyms) of any individuals involved. If there are additional    witnesses, please include them as well.</li> <li>Your account of what occurred, and if you believe the incident is ongoing. If there is a publicly    available record (e.g. a mailing list archive or a public IRC logger), please include a link.</li> <li>Any additional information that may be helpful.</li> </ul> <p>After filing a report, a representative from the Square Code of Conduct committee will contact you personally. The committee will then review the incident, follow up with any additional questions, and make a decision as to how to respond.</p> <p>Anyone asked to stop unacceptable behavior is expected to comply immediately. If an individual engages in unacceptable behavior, the Square Code of Conduct committee may take any action they deem appropriate, up to and including a permanent ban from all of Square spaces without warning.</p>"},{"location":"dev-env/","title":"Dev Environment for LeakCanary contributors","text":""},{"location":"dev-env/#setup","title":"Setup","text":"<ul> <li>Download Android Studio.</li> <li>We use two spaces code indentation, use <code>SquareAndroid</code> code style settings from https://github.com/square/java-code-styles.</li> <li>Build with <code>./gradlew build</code>.</li> <li>Running the failing UI tests to confirm leak detection correctly fails UI tests: <code>./gradlew leakcanary-android-sample:connectedCheck</code>.</li> <li>Normal UI tests: <code>./gradlew leakcanary-android-core:connectedCheck</code>.</li> </ul>"},{"location":"dev-env/#static-code-analysis","title":"Static Code Analysis","text":"<ul> <li>LeakCanary uses Detekt for static Code analysis.</li> <li>Analyze the entire project with <code>./gradlew check</code> or particular modules with <code>./gradlew :module-name:check</code>. Detekt will fail the build if any ruleset violations are found. You should fix all issues before pushing the branch to remote.</li> <li>There\u2019s also a git pre-push hook that will run analysis automatically before pushing a branch to the remote. If there are any violations - it will prevent the push. Fix the issues!</li> <li>You can bypass the git hook though; Travis CI will still run checks and will fail if any violations are found. </li> <li>Detekt report will be printed in the console and saved to <code>/moduleDir/build/reports/</code>.</li> </ul>"},{"location":"dev-env/#deploying-locally","title":"Deploying locally","text":"<p>To deploy LeakCanary to your local maven repository, run the following command, changing the path to the path of your local repository:</p> <pre><code>./gradlew uploadArchives -PSNAPSHOT_REPOSITORY_URL=file:///Users/py/.m2/repository\n</code></pre> <p>Then add the SNAPSHOT dependency and <code>mavenLocal()</code> repository to your project:</p> <pre><code>dependencies {\n  debugImplementation 'com.squareup.leakcanary:leakcanary-android:3.0-alpha-5-SNAPSHOT'\n}\n\nrepositories {\n  mavenLocal()\n}\n</code></pre>"},{"location":"dev-env/#deploying-the-docs-locally","title":"Deploying the docs locally","text":"<p>Installing or updating the docs dependencies:</p> <pre><code>pip install --requirement docs/requirements.txt\n</code></pre> <p>Deploying locally</p> <pre><code>mkdocs serve\n</code></pre>"},{"location":"faq/","title":"FAQ","text":""},{"location":"faq/#can-a-leak-be-caused-by-the-android-sdk","title":"Can a leak be caused by the Android SDK?","text":"<p>Yes. There are a number of known memory leaks that have been fixed over time in AOSP as well as in manufacturer implementations. When such a leak occurs, there is little you can do as an app developer to fix it. For that reason, LeakCanary has a built-in list of known Android leaks to recognize, called Library Leaks (see Categorizing leaks).</p> <p>If you find a new one, please create an issue (choose \ud83e\udd16Leak in Android SDK / support library) and follow these steps:</p> <ol> <li>Provide the entire leak trace information (including metadata), and use backticks (`) for formatting.</li> <li>Read the AOSP source for that version of Android, and try to figure out why it happens. You can easily navigate through SDK versions by switching branches on the GitHub mirror: android/platform_frameworks_base.</li> <li>Check if it happens on the latest version of Android, and otherwise use blame to find when it was fixed.</li> <li>If it\u2019s still happening, build a simple repro case.</li> <li>File an issue on b.android.com with the leak trace and the repro case. Please remember to follow up the issue when there are new responses. b/176886060 is a good example of effective and respectful communication.</li> <li>Create a PR in LeakCanary to update AndroidReferenceMatchers. Optional: if you find a hack to clear that leak on previous versions of Android, feel free to document it.</li> </ol>"},{"location":"faq/#how-do-i-know-if-leakcanary-is-running","title":"How do I know if LeakCanary is running?","text":"<p>You can confirm that LeakCanary starts correctly by filtering on the LeakCanary tag in Logcat:</p> <pre><code>$ adb logcat | grep LeakCanary\n\nD/LeakCanary: Installing AppWatcher\n</code></pre> <p>If you do not see <code>Installing AppWatcher</code> in the logs, check your dependencies (<code>./gradlew app:dependencies</code>) and make sure LeakCanary is there.</p> <p>Note that LeakCanary is automatically disabled in tests (see LeakCanary test environment detection):</p> <pre><code>$ adb logcat | grep LeakCanary\n\nD/LeakCanary: Installing AppWatcher\nD/LeakCanary: JUnit detected in classpath, app is running tests =&gt; disabling heap dumping &amp; analysis\nD/LeakCanary: Updated LeakCanary.config: Config(dumpHeap=false)\n</code></pre>"},{"location":"faq/#where-does-leakcanary-store-heap-dumps","title":"Where does LeakCanary store heap dumps?","text":"<p>The default behavior is to store heap dumps in a <code>leakcanary</code> folder under the app directory. If the app has been granted the <code>android.permission.WRITE_EXTERNAL_STORAGE</code> permission, then heap dumps will be stored in a <code>leakcanary-com.example</code> folder (where <code>com.example</code> is your app package name) under the <code>Download</code> folder of the external storage. If the app has not been granted the <code>android.permission.WRITE_EXTERNAL_STORAGE</code> permission but that permission is listed in <code>AndroidManifest.xml</code> then LeakCanary will show a notification that can be tapped to grant permission.</p>"},{"location":"faq/#how-can-i-dig-beyond-the-leak-trace","title":"How can I dig beyond the leak trace?","text":"<p>Sometimes the leak trace isn\u2019t enough and you need to dig into a heap dump with MAT or YourKit.</p> <ul> <li>Go to a heap analysis screen, click the overflow menu and select Share Heap Dump.</li> </ul> <p>Here\u2019s how you can find the leaking instance in the heap dump:</p> <ol> <li>Look for all instances of <code>leakcanary.KeyedWeakReference</code>.</li> <li>For each of these, look at the <code>key</code> field.</li> <li>Find the <code>KeyedWeakReference</code> that has a <code>key</code> field equal to the reference key reported by LeakCanary.</li> <li>The <code>referent</code> field of that <code>KeyedWeakReference</code> is your leaking object.</li> <li>From then on, the matter is in your hands. A good start is to look at the shortest path to GC Roots (excluding weak references).</li> </ol>"},{"location":"faq/#how-does-leakcanary-get-installed-by-only-adding-a-dependency","title":"How does LeakCanary get installed by only adding a dependency?","text":"<p>On Android, content providers are created after the Application instance is created but before Application.onCreate() is called. The <code>leakcanary-object-watcher-android</code> artifact has a non exported ContentProvider defined in its <code>AndroidManifest.xml</code> file. When that ContentProvider is installed, it adds activity and fragment lifecycle listeners to the application.</p>"},{"location":"faq/#how-many-methods-does-leakcanary-add","title":"How many methods does LeakCanary add?","text":"<p>0. LeakCanary is a debug only library.</p>"},{"location":"faq/#how-do-i-use-the-snapshot-version","title":"How do I use the SNAPSHOT version?","text":"<p>Update your dependencies to the latest SNAPSHOT (see build.gradle):</p> <pre><code>dependencies {\n  debugImplementation 'com.squareup.leakcanary:leakcanary-android:3.0-alpha-5-SNAPSHOT'\n}\n</code></pre> <p>Add Sonatype\u2019s <code>snapshots</code> repository:</p> <pre><code>repositories {\n  mavenCentral()\n  maven {\n    url 'https://s01.oss.sonatype.org/content/repositories/snapshots/'\n  }\n}\n</code></pre> <p>Status of the snapshot build: </p>"},{"location":"faq/#whos-behind-leakcanary","title":"Who\u2019s behind LeakCanary?","text":"<p>LeakCanary was created and open sourced by @pyricau, with many contributions from the community.</p>"},{"location":"faq/#why-is-it-called-leakcanary","title":"Why is it called LeakCanary?","text":"<p>The name LeakCanary is a reference to the expression canary in a coal mine, because LeakCanary is a sentinel used to detect risks by providing advance warning of a danger. Props to @edenman for suggesting it!</p>"},{"location":"faq/#who-made-the-logo","title":"Who made the logo?","text":"<ul> <li>@pyricau quickly made the first version of the logo. It was based on cliparts from Android Asset Studio, mixed with the selection from a photo of a Canary. The exclamation mark means danger, the shield stands for protection, and the bird, well, is a canary.</li> <li>@romainguy turned the ugly logo into a nice vector asset.</li> <li>@flickator designed a much nicer logo for LeakCanary 2.0!</li> </ul>"},{"location":"fundamentals-fixing-a-memory-leak/","title":"Fixing a memory leak","text":"<p>A memory leak is a programming error that causes an application to keep a reference to an object that is no longer needed. Somewhere in the code, there\u2019s a reference that should have been cleared and wasn\u2019t.</p> <p>Follow these 4 steps to fix memory leaks:</p> <ol> <li>Find the leak trace.</li> <li>Narrow down the suspect references.</li> <li>Find the reference causing the leak.</li> <li>Fix the leak.</li> </ol> <p>LeakCanary helps you with the first two steps. The last two steps are up to you!</p>"},{"location":"fundamentals-fixing-a-memory-leak/#1-find-the-leak-trace","title":"1. Find the leak trace","text":"<p>A leak trace is a shorter name for the best strong reference path from garbage collection roots to the retained object, ie the path of references that is holding an object in memory, therefore preventing it from being garbage collected.</p> <p>For example, let\u2019s store a helper singleton in a static field:</p> <pre><code>class Helper {\n}\n\nclass Utils {\npublic static Helper helper = new Helper();\n}\n</code></pre> <p>Let\u2019s tell LeakCanary that the singleton instance is expected to be garbage collected:</p> <pre><code>AppWatcher.objectWatcher.watch(Utils.helper)\n</code></pre> <p>The leak trace for that singleton looks like this:</p> <pre><code>\u252c\u2500\u2500\u2500\n\u2502 GC Root: Local variable in native code\n\u2502\n\u251c\u2500 dalvik.system.PathClassLoader instance\n\u2502    \u2193 PathClassLoader.runtimeInternalObjects\n\u251c\u2500 java.lang.Object[] array\n\u2502    \u2193 Object[].[43]\n\u251c\u2500 com.example.Utils class\n\u2502    \u2193 static Utils.helper\n\u2570\u2192 java.example.Helper\n</code></pre> <p>Let\u2019s break it down! At the top, a <code>PathClassLoader</code> instance is held by a garbage collection (GC) root, more specifically a local variable in native code. GC roots are special objects that are always reachable, ie they cannot be garbage collected. There are 4 main types of GC root:</p> <ul> <li>Local variables, which belong to the stack of a thread.</li> <li>Instances of active Java threads.</li> <li>System Classes, which never unload.</li> <li>Native references, which are controlled by native code.</li> </ul> <pre><code>\u252c\u2500\u2500\u2500\n\u2502 GC Root: Local variable in native code\n\u2502\n\u251c\u2500 dalvik.system.PathClassLoader instance\n</code></pre> <p>A line starting with <code>\u251c\u2500</code> represents a Java object (either a class, an object array or an instance), and a line starting with <code>\u2502    \u2193</code> represents a reference to the Java object on the next line.</p> <p><code>PathClassLoader</code> has a <code>runtimeInternalObjects</code> field that is a reference to an array of <code>Object</code>:</p> <pre><code>\u251c\u2500 dalvik.system.PathClassLoader instance\n\u2502    \u2193 PathClassLoader.runtimeInternalObjects\n\u251c\u2500 java.lang.Object[] array\n</code></pre> <p>The element at position 43 in that array of <code>Object</code> is a reference to the <code>Utils</code> class.</p> <pre><code>\u251c\u2500 java.lang.Object[] array\n\u2502    \u2193 Object[].[43]\n\u251c\u2500 com.example.Utils class\n</code></pre> <p>A line starting with <code>\u2570\u2192</code> represents the leaking object, ie the object that is passed to AppWatcher.objectWatcher.watch().</p> <p>The <code>Utils</code> class has a static <code>helper</code> field which is a reference to the leaking object, which is the Helper singleton instance:</p> <pre><code>\u251c\u2500 com.example.Utils class\n\u2502    \u2193 static Utils.helper\n\u2570\u2192 java.example.Helper instance\n</code></pre>"},{"location":"fundamentals-fixing-a-memory-leak/#2-narrow-down-the-suspect-references","title":"2. Narrow down the suspect references","text":"<p>A leak trace is a path of references. Initially, all references in that path are suspected of causing the leak, but LeakCanary can automatically narrow down the suspect references. To understand what that means, let\u2019s go through that process manually.</p> <p>Here\u2019s an example of bad Android code:</p> <pre><code>class ExampleApplication : Application() {\nval leakedViews = mutableListOf&lt;View&gt;()\n}\n\nclass MainActivity : Activity() {\noverride fun onCreate(savedInstanceState: Bundle?) {\nsuper.onCreate(savedInstanceState)\nsetContentView(R.layout.main_activity)\n\nval textView = findViewById&lt;View&gt;(R.id.helper_text)\n\nval app = application as ExampleApplication\n// This creates a leak, What a Terrible Failure!\napp.leakedViews.add(textView)\n}\n}\n</code></pre> <p>LeakCanary produces a leak trace that looks like this:</p> <pre><code>\u252c\u2500\u2500\u2500\n\u2502 GC Root: System class\n\u2502\n\u251c\u2500 android.provider.FontsContract class\n\u2502    \u2193 static FontsContract.sContext\n\u251c\u2500 com.example.leakcanary.ExampleApplication instance\n\u2502    \u2193 ExampleApplication.leakedViews\n\u251c\u2500 java.util.ArrayList instance\n\u2502    \u2193 ArrayList.elementData\n\u251c\u2500 java.lang.Object[] array\n\u2502    \u2193 Object[].[0]\n\u251c\u2500 android.widget.TextView instance\n\u2502    \u2193 TextView.mContext\n\u2570\u2192 com.example.leakcanary.MainActivity instance\n</code></pre> <p>Here\u2019s how to read that leak trace:</p> <p>The <code>FontsContract</code> class is a system class (see <code>GC Root: System class</code>) and has an <code>sContext</code> static field which references an <code>ExampleApplication</code> instance which has a <code>leakedViews</code> field which references an <code>ArrayList</code> instance which references an array (the array backing the array list implementation) which has an element that references a <code>TextView</code> which has an <code>mContext</code> field which references a destroyed instance of <code>MainActivity</code>.</p> <p>LeakCanary highlights all references suspected of causing this leak using ~~~ underlines. Initially, all references are suspect:</p> <pre><code>\u252c\u2500\u2500\u2500\n\u2502 GC Root: System class\n\u2502\n\u251c\u2500 android.provider.FontsContract class\n\u2502    \u2193 static FontsContract.sContext\n\u2502                           ~~~~~~~~\n\u251c\u2500 com.example.leakcanary.ExampleApplication instance\n\u2502    Leaking: NO (Application is a singleton)\n\u2502    \u2193 ExampleApplication.leakedViews\n\u2502                         ~~~~~~~~~~~\n\u251c\u2500 java.util.ArrayList instance\n\u2502    \u2193 ArrayList.elementData\n\u2502                ~~~~~~~~~~~\n\u251c\u2500 java.lang.Object[] array\n\u2502    \u2193 Object[].[0]\n\u2502               ~~~\n\u251c\u2500 android.widget.TextView instance\n\u2502    \u2193 TextView.mContext\n\u2502               ~~~~~~~~\n\u2570\u2192 com.example.leakcanary.MainActivity instance\n</code></pre> <p>Then, LeakCanary makes deductions about the state and the lifecycle of the objects in the leak trace. In an Android app the <code>Application</code> instance is a singleton that is never garbage collected, so it\u2019s never leaking (<code>Leaking: NO (Application is a singleton)</code>). From that, LeakCanary concludes that the leak is not caused by <code>FontsContract.sContext</code> (removal of corresponding <code>~~~</code>). Here\u2019s the updated leak trace:</p> <pre><code>\u252c\u2500\u2500\u2500\n\u2502 GC Root: System class\n\u2502\n\u251c\u2500 android.provider.FontsContract class\n\u2502    \u2193 static FontsContract.sContext\n\u251c\u2500 com.example.leakcanary.ExampleApplication instance\n\u2502    Leaking: NO (Application is a singleton)\n\u2502    \u2193 ExampleApplication.leakedViews\n\u2502                         ~~~~~~~~~~~\n\u251c\u2500 java.util.ArrayList instance\n\u2502    \u2193 ArrayList.elementData\n\u2502                ~~~~~~~~~~~\n\u251c\u2500 java.lang.Object[] array\n\u2502    \u2193 Object[].[0]\n\u2502               ~~~\n\u251c\u2500 android.widget.TextView instance\n\u2502    \u2193 TextView.mContext\n\u2502               ~~~~~~~~\n\u2570\u2192 com.example.leakcanary.MainActivity instance\n</code></pre> <p>The <code>TextView</code> instance references the destroyed <code>MainActivity</code> instance via it\u2019s <code>mContext</code> field. Views should not survive the lifecycle of their context, so LeakCanary knows that this <code>TextView</code> instance is leaking (<code>Leaking: YES (View.mContext references a destroyed activity)</code>), and therefore that the leak is not caused by <code>TextView.mContext</code> (removal of corresponding <code>~~~</code>). Here\u2019s the updated leak trace:</p> <pre><code>\u252c\u2500\u2500\u2500\n\u2502 GC Root: System class\n\u2502\n\u251c\u2500 android.provider.FontsContract class\n\u2502    \u2193 static FontsContract.sContext\n\u251c\u2500 com.example.leakcanary.ExampleApplication instance\n\u2502    Leaking: NO (Application is a singleton)\n\u2502    \u2193 ExampleApplication.leakedViews\n\u2502                         ~~~~~~~~~~~\n\u251c\u2500 java.util.ArrayList instance\n\u2502    \u2193 ArrayList.elementData\n\u2502                ~~~~~~~~~~~\n\u251c\u2500 java.lang.Object[] array\n\u2502    \u2193 Object[].[0]\n\u2502               ~~~\n\u251c\u2500 android.widget.TextView instance\n\u2502    Leaking: YES (View.mContext references a destroyed activity)\n\u2502    \u2193 TextView.mContext\n\u2570\u2192 com.example.leakcanary.MainActivity instance\n</code></pre> <p>To summarize, LeakCanary inspects the state of objects in the leak trace to figure out if these objects are leaking (<code>Leaking: YES</code> vs <code>Leaking: NO</code>), and leverages that information to narrow down the suspect references. You can provide custom <code>ObjectInspector</code> implementations to improve how LeakCanary works in your codebase (see Identifying leaking objects and labeling objects).</p>"},{"location":"fundamentals-fixing-a-memory-leak/#3-find-the-reference-causing-the-leak","title":"3. Find the reference causing the leak","text":"<p>In the previous example, LeakCanary narrowed down the suspect references to <code>ExampleApplication.leakedViews</code>, <code>ArrayList.elementData</code> and <code>Object[].[0]</code>:</p> <pre><code>\u252c\u2500\u2500\u2500\n\u2502 GC Root: System class\n\u2502\n\u251c\u2500 android.provider.FontsContract class\n\u2502    \u2193 static FontsContract.sContext\n\u251c\u2500 com.example.leakcanary.ExampleApplication instance\n\u2502    Leaking: NO (Application is a singleton)\n\u2502    \u2193 ExampleApplication.leakedViews\n\u2502                         ~~~~~~~~~~~\n\u251c\u2500 java.util.ArrayList instance\n\u2502    \u2193 ArrayList.elementData\n\u2502                ~~~~~~~~~~~\n\u251c\u2500 java.lang.Object[] array\n\u2502    \u2193 Object[].[0]\n\u2502               ~~~\n\u251c\u2500 android.widget.TextView instance\n\u2502    Leaking: YES (View.mContext references a destroyed activity)\n\u2502    \u2193 TextView.mContext\n\u2570\u2192 com.example.leakcanary.MainActivity instance\n</code></pre> <p><code>ArrayList.elementData</code> and <code>Object[].[0]</code> are implementation details of <code>ArrayList</code>, and it\u2019s unlikely that there\u2019s a bug in the <code>ArrayList</code> implementation, so the reference causing the leak is the only remaining reference: <code>ExampleApplication.leakedViews</code>.</p>"},{"location":"fundamentals-fixing-a-memory-leak/#4-fix-the-leak","title":"4. Fix the leak","text":"<p>Once you find the reference causing the leak, you need to figure out what that reference is about, when it should have been cleared and why it hasn\u2019t been. Sometimes it\u2019s obvious, like in the previous example. Sometimes you need more information to figure it out. You can add labels, or explore the hprof directly (see How can I dig beyond the leak trace?).</p> <p>Warning</p> <p>Memory leaks cannot be fixed by replacing strong references with weak references. It\u2019s a common solution when attempting to quickly address memory issues, however it never works. The bugs that were causing references to be kept longer than necessary are still there. On top of that, it creates more bugs as some objects will now be garbage collected sooner than they should. It also makes the code much harder to maintain.</p> <p>What\u2019s next? Customize LeakCanary to your needs with code recipes!</p>"},{"location":"fundamentals-how-leakcanary-works/","title":"How LeakCanary works","text":"<p>Once LeakCanary is installed, it automatically detects and report memory leaks, in 4 steps:</p> <ol> <li>Detecting retained objects.</li> <li>Dumping the heap.</li> <li>Analyzing the heap.</li> <li>Categorizing leaks.</li> </ol>"},{"location":"fundamentals-how-leakcanary-works/#1-detecting-retained-objects","title":"1. Detecting retained objects","text":"<p>LeakCanary hooks into the Android lifecycle to automatically detect when activities and fragments are destroyed and should be garbage collected. These destroyed objects are passed to an <code>ObjectWatcher</code>, which holds weak references to them. LeakCanary automatically detects leaks for the following objects:</p> <ul> <li>destroyed <code>Activity</code> instances</li> <li>destroyed <code>Fragment</code> instances</li> <li>destroyed fragment <code>View</code> instances</li> <li>cleared <code>ViewModel</code> instances</li> </ul> <p>You can watch any objects that is no longer needed, for example a detached view or a destroyed presenter:</p> <pre><code>AppWatcher.objectWatcher.watch(myDetachedView, \"View was detached\")\n</code></pre> <p>If the weak reference held by <code>ObjectWatcher</code> isn\u2019t cleared after waiting 5 seconds and running garbage collection, the watched object is considered retained, and potentially leaking. LeakCanary logs this to Logcat:</p> <pre><code>D LeakCanary: Watching instance of com.example.leakcanary.MainActivity\n  (Activity received Activity#onDestroy() callback) \n\n... 5 seconds later ...\n\nD LeakCanary: Scheduling check for retained objects because found new object\n  retained\n</code></pre> <p>LeakCanary waits for the count of retained objects to reach a threshold before dumping the heap, and displays a notification with the latest count.</p> <p> Figure 1. LeakCanary found 4 retained objects.</p> <pre><code>D LeakCanary: Rescheduling check for retained objects in 2000ms because found\n  only 4 retained objects (&lt; 5 while app visible)\n</code></pre> <p>Info</p> <p>The default threshold is 5 retained objects when the app is visible, and 1 retained object when the app is not visible. If you see the retained objects notification and then put the app in background (for example by pressing the Home button), then the threshold changes from 5 to 1 and LeakCanary dumps the heap within 5 seconds. Tapping the notification forces LeakCanary to dump the heap immediately.</p>"},{"location":"fundamentals-how-leakcanary-works/#2-dumping-the-heap","title":"2. Dumping the heap","text":"<p>When the count of retained objects reaches a threshold, LeakCanary dumps the Java heap into a <code>.hprof</code> file (a heap dump) stored onto the Android file system (see Where does LeakCanary store heap dumps?). Dumping the heap freezes the app for a short amount of time, during which LeakCanary displays the following toast:</p> <p> Figure 2. LeakCanary shows a toast while dumping the heap.</p>"},{"location":"fundamentals-how-leakcanary-works/#3-analyzing-the-heap","title":"3. Analyzing the heap","text":"<p>LeakCanary parses the <code>.hprof</code> file using Shark and locates the retained objects in that heap dump.</p> <p> Figure 3. LeakCanary finds retained objects in the heap dump.</p> <p>For each retained object, LeakCanary finds the path of references that prevents that retained object from being garbage collected: its leak trace. You will learn to analyze a leak trace in the next section: Fixing a memory leak.</p> <p> Figure 4. LeakCanary computes the leak trace for each retained object.</p> <p>When the analysis is done, LeakCanary displays a notification with a summary, and also prints the result in Logcat. Notice below how the 4 retained objects are grouped as 2 distinct leaks. LeakCanary creates a signature for each leak trace, and groups together leaks that have the same signature, ie leaks that are caused by the same bug.</p> <p> Figure 5. The 4 leak traces turned into 2 distinct leak signatures.</p> <pre><code>====================================\nHEAP ANALYSIS RESULT\n====================================\n2 APPLICATION LEAKS\n\nDisplaying only 1 leak trace out of 2 with the same signature\nSignature: ce9dee3a1feb859fd3b3a9ff51e3ddfd8efbc6\n\u252c\u2500\u2500\u2500\n\u2502 GC Root: Local variable in native code\n\u2502\n...\n</code></pre> <p>Tapping the notification starts an activity that provides more details. Come back to it again later by tapping the LeakCanary launcher icon:</p> <p> Figure 6. LeakCanary adds a launcher icon for each app it\u2019s installed in.</p> <p>Each row corresponds to a group of leaks with the same signature. LeakCanary  marks a row as New the first time the app triggers a leak with that signature.</p> <p> Figure 7. The 4 leaks grouped into 2 rows, one for each distinct leak signature.</p> <p>Tap on a leak to open up a screen with the leak trace. You can toggle between retained objects and their leak trace via a drop down.</p> <p> Figure 8. A screen showing 3 leaks grouped by their common leak signature.</p> <p>The leak signature is the hash of the concatenation of each reference suspected to cause the leak, ie each reference displayed with a red underline:</p> <p> Figure 9. A leak trace with 3 suspect references.</p> <p>These same suspicious references are underlined with <code>~~~</code> when the leak trace is shared as text:</p> <pre><code>...\n\u2502  \n\u251c\u2500 com.example.leakcanary.LeakingSingleton class\n\u2502    Leaking: NO (a class is never leaking)\n\u2502    \u2193 static LeakingSingleton.leakedViews\n\u2502                              ~~~~~~~~~~~\n\u251c\u2500 java.util.ArrayList instance\n\u2502    Leaking: UNKNOWN\n\u2502    \u2193 ArrayList.elementData\n\u2502                ~~~~~~~~~~~\n\u251c\u2500 java.lang.Object[] array\n\u2502    Leaking: UNKNOWN\n\u2502    \u2193 Object[].[0]\n\u2502               ~~~\n\u251c\u2500 android.widget.TextView instance\n\u2502    Leaking: YES (View.mContext references a destroyed activity)\n...\n</code></pre> <p>In the example above, the signature of the leak would be computed as:</p> <pre><code>val leakSignature = sha1Hash(\n\"com.example.leakcanary.LeakingSingleton.leakedView\" +\n\"java.util.ArrayList.elementData\" +\n\"java.lang.Object[].[x]\"\n)\nprintln(leakSignature)\n// dbfa277d7e5624792e8b60bc950cd164190a11aa\n</code></pre>"},{"location":"fundamentals-how-leakcanary-works/#4-categorizing-leaks","title":"4. Categorizing leaks","text":"<p>LeakCanary separates the leaks it finds in your app into two categories: Application Leaks and Library Leaks. A Library Leak is a leak caused by a known bug in 3rd party code that you do not have control over. This leak is impacting your application, but unfortunately fixing it may not be in your control so LeakCanary separates it out.</p> <p>The two categories are separated in the result printed in Logcat:</p> <pre><code>====================================\nHEAP ANALYSIS RESULT\n====================================\n0 APPLICATION LEAKS\n\n====================================\n1 LIBRARY LEAK\n\n...\n\u252c\u2500\u2500\u2500\n\u2502 GC Root: Local variable in native code\n\u2502\n...\n</code></pre> <p>LeakCanary marks a row as a Library Leak in its list of leaks:</p> <p> Figure 10. LeakCanary found a Library Leak.</p> <p>LeakCanary ships with a database of known leaks, which it recognizes by pattern matching on reference names. For example:</p> <pre><code>Leak pattern: instance field android.app.Activity$1#this$0\nDescription: Android Q added a new IRequestFinishCallback$Stub class [...]\n\u252c\u2500\u2500\u2500\n\u2502 GC Root: Global variable in native code\n\u2502\n\u251c\u2500 android.app.Activity$1 instance\n\u2502    Leaking: UNKNOWN\n\u2502    Anonymous subclass of android.app.IRequestFinishCallback$Stub\n\u2502    \u2193 Activity$1.this$0\n\u2502                 ~~~~~~\n\u2570\u2192 com.example.MainActivity instance\n</code></pre> <p>What did I do to cause this leak?</p> <p>Nothing wrong! You used an API the way it was intended but the implementation has a bug that is causing this leak.</p> <p>Is there anything I can do to prevent it?</p> <p>Maybe! Some Library Leaks can be fixed using reflection, others by exercising a code path that makes the leak go away. This type of fix tends to be hacky, so beware! Your best option might be to find the bug report or file one, and insist that the bug gets fixed.</p> <p>Since I can\u2019t do much about this leak, is there a way I can ask LeakCanary to ignore it?</p> <p>There\u2019s no way for LeakCanary to know whether a leak is a Library Leak prior to dumping the heap and analyzing it. If LeakCanary didn\u2019t show the result notification when a Library Leak is found then you\u2019d start wondering what happened to the LeakCanary analysis after the dumping toast.</p> <p>You can see the full list of known leaks in the AndroidReferenceMatchers class. If you find an Android SDK leak that isn\u2019t recognized, please report it. You can also customize the list of known Library Leaks.</p> <p>What\u2019s next? Learn how to fix a memory leak!</p>"},{"location":"fundamentals/","title":"Introduction","text":"<p>The fundamentals describe how LeakCanary works and how to use it to detect and fix memory leaks. This documentation is designed to help developers of all levels, so please don\u2019t hesitate to report any confusing section.</p>"},{"location":"fundamentals/#what-is-a-memory-leak","title":"What is a memory leak?","text":"<p>In a Java based runtime, a memory leak is a programming error that causes an application to keep a reference to an object that is no longer needed. As a result, the memory allocated for that object cannot be reclaimed.</p> <p>For example, an Android <code>Activity</code> instance is no longer needed after its <code>onDestroy()</code> method is called, and storing a reference to that instance in a static field prevents it from being garbage collected.</p>"},{"location":"fundamentals/#common-causes-for-memory-leaks","title":"Common causes for memory leaks","text":"<p>Most memory leaks are caused by bugs related to the lifecycle of objects. Here are a few common Android mistakes:</p> <ul> <li>Adding a <code>Fragment</code> instance to the backstack without clearing that Fragment\u2019s view fields in <code>Fragment.onDestroyView()</code> (more details in this StackOverflow answer).</li> <li>Storing an <code>Activity</code> instance as a <code>Context</code> field in an object that survives activity recreation due to configuration changes.</li> <li>Registering a listener, broadcast receiver or RxJava subscription which references an object with lifecycle, and forgetting to unregister when the lifecycle reaches its end.</li> </ul>"},{"location":"fundamentals/#why-should-i-use-leakcanary","title":"Why should I use LeakCanary?","text":"<p>Memory leaks are very common in Android apps. As small memory leaks accumulate, memory usage grows, the Garbage Collector (GC) runs more frequently and consumes more CPU, causing jank, UI freezes and Application Not Responding (ANR) reports, eventually leading to an OutOfMemoryError (OOME) crash. LeakCanary will help you find and fix these memory leaks during development. When Square engineers first enabled LeakCanary in the Square Point Of Sale app, they were able to fix several leaks and reduced the OOM crash rate by 94%.</p> <p>Info</p> <p>Your crash reporting tool might not correctly report OOMEs. When memory is low because of memory leak accumulation, an OOM can be thrown from anywhere in the app code, which means that every OOM has a different stacktrace. So instead of one crash entry with a 1000 crashes, OOMs get reported as 1000 distinct crashes and hide in the long tail of low occurring crashes.</p> <p>What\u2019s next? Learn how LeakCanary works!</p>"},{"location":"getting_started/","title":"Getting started","text":"<p>To use LeakCanary, add the <code>leakcanary-android</code> dependency to your app\u2019s <code>build.gradle</code> file:</p> <pre><code>dependencies {\n// debugImplementation because LeakCanary should only run in debug builds.\ndebugImplementation 'com.squareup.leakcanary:leakcanary-android:2.14'\n}\n</code></pre> <p>That\u2019s it, there is no code change needed!</p> <p>Confirm that LeakCanary is running on startup by filtering on the <code>LeakCanary</code> tag in Logcat:</p> <pre><code>D LeakCanary: LeakCanary is running and ready to detect leaks\n</code></pre> <p>Info</p> <p>LeakCanary automatically detects leaks of the following objects:</p> <ul> <li>destroyed <code>Activity</code> instances</li> <li>destroyed <code>Fragment</code> instances</li> <li>destroyed fragment <code>View</code> instances</li> <li>cleared <code>ViewModel</code> instances</li> <li>destroyed <code>Service</code> instance</li> </ul> <p>What\u2019s next? Learn the Fundamentals!</p>"},{"location":"how_to_help/","title":"How to help","text":"<p>\ud83d\ude4f\ud83d\ude4f\ud83d\ude4f</p> <p>LeakCanary is maintained by volunteers. Your help is welcome and will benefit the entire Android community!</p> <p>Here\u2019s how you can help:</p> <ul> <li>Contribute to Help Wanted issues.</li> <li>Answer StackOverflow questions.</li> <li>Provide feedback on pull requests.</li> <li>Contribute code by forking the repository on GitHub and sending a pull request. Please read Dev Environment for LeakCanary contributors. When submitting code, please make every effort to follow existing conventions and style in order to keep the code as readable as possible.</li> </ul>"},{"location":"leakcanary-for-releases/","title":"LeakCanary for releases","text":""},{"location":"leakcanary-for-releases/#leakcanary-for-releases","title":"LeakCanary for releases","text":"<p>Fixing leaks found in debug builds helps reduce <code>Application Not Responding</code> freezes and <code>OutfOfMemoryError</code> error crashes, but only scratches the surface of all the leaks that can happen. For the leaks that are found in debug builds, it\u2019s hard to determine which leaks to fix first.</p> <p>This situation is very similar to debug crashes, where we are often unable to make an accurate assessment of their future impact in a production environment nor find all crashes that will happen in production. For crashes, apps typically monitor a crash rate by having a release crash reporting pipeline, with counts to prioritize fixes.</p> <p>LeakCanary for releases exposes APIs to run a heap analysis in release builds, in production.</p> <p>Danger</p> <p>Everything about this is experimental. Running a heap analysis in production is not a very common thing to do, and we\u2019re still learning and experimenting with this. Also, both the artifact name and the APIs may change.</p>"},{"location":"leakcanary-for-releases/#getting-started","title":"Getting started","text":"<p>LeakCanary provides an artifact dedicated to detecting leaks in release builds:</p> <pre><code>dependencies {\n// LeakCanary for releases\nreleaseImplementation 'com.squareup.leakcanary:leakcanary-android-release:2.14'\n// Optional: detect retained objects. This helps but is not required.\nreleaseImplementation 'com.squareup.leakcanary:leakcanary-object-watcher-android:2.14'\n}\n</code></pre> <p>Here\u2019s a code example that runs a heap analysis when the screen is turned off or the app enters background, checking first if a Firebase Remote Config flag is turned on, and uploading the result to Bugsnag:</p> <pre><code>import android.os.Process.THREAD_PRIORITY_BACKGROUND\nimport java.util.concurrent.Executors\nimport kotlin.concurrent.thread\nimport leakcanary.BackgroundTrigger\nimport leakcanary.HeapAnalysisClient\nimport leakcanary.HeapAnalysisConfig\nimport leakcanary.HeapAnalysisInterceptor\nimport leakcanary.HeapAnalysisInterceptor.Chain\nimport leakcanary.HeapAnalysisJob\nimport leakcanary.HeapAnalysisJob.Result.Done\nimport leakcanary.ScreenOffTrigger\n\nclass ReleaseExampleApplication : ExampleApplication() {\n\noverride fun onCreate() {\nsuper.onCreate()\n\n// Delete any remaining heap dump (if we crashed)\nanalysisExecutor.execute {\nanalysisClient.deleteHeapDumpFiles()\n}\n\n// Starts heap analysis on background importance\nBackgroundTrigger(\napplication = this,\nanalysisClient = analysisClient,\nanalysisExecutor = analysisExecutor,\nanalysisCallback = analysisCallback\n).start()\n\n// Starts heap analysis when screen off\nScreenOffTrigger(\napplication = this,\nanalysisClient = analysisClient,\nanalysisExecutor = analysisExecutor,\nanalysisCallback = analysisCallback\n).start()\n}\n\n/**\n   * Call this to trigger heap analysis manually, e.g. from\n   * a help button.\n   *\n   * This method returns a `HeapAnalysisJob` on which you can\n   * call `HeapAnalysisJob.cancel()` at any time.\n   */\nfun triggerHeapAnalysisNow(): HeapAnalysisJob {\nval job = analysisClient.newJob()\nanalysisExecutor.execute {\nval result = job.execute()\nanalysisCallback(result)\n}\nreturn job\n}\n\nprivate val analysisClient by lazy {\nHeapAnalysisClient(\n// Use private app storage. cacheDir is never backed up which is important.\nheapDumpDirectoryProvider = { cacheDir },\n// stripHeapDump: remove all user data from hprof before analysis.\nconfig = HeapAnalysisConfig(stripHeapDump = true),\n// Default interceptors may cancel analysis for several other reasons.\ninterceptors = listOf(flagInterceptor) + HeapAnalysisClient.defaultInterceptors(this)\n)\n}\n\n// Cancels heap analysis if \"heap_analysis_flag\" is false.\nprivate val flagInterceptor = object : HeapAnalysisInterceptor {\nval remoteConfig by lazy { FirebaseRemoteConfig.getInstance() }\n\noverride fun intercept(chain: Chain): HeapAnalysisJob.Result {\nif (remoteConfig.getBoolean(\"heap_analysis_flag\")) {\nchain.job.cancel(\"heap_analysis_flag false\")\n}\nreturn chain.proceed()\n}\n}\n\nprivate val analysisExecutor = Executors.newSingleThreadExecutor {\nthread(start = false, name = \"Heap analysis executor\") {\nandroid.os.Process.setThreadPriority(THREAD_PRIORITY_BACKGROUND)\nit.run()\n}\n}\n\nprivate val analysisCallback: (HeapAnalysisJob.Result) -&gt; Unit = { result -&gt;\nif (result is Done) {\nuploader.upload(result.analysis)\n}\n}\n\nprivate val uploader by lazy {\nBugsnagLeakUploader(this@ReleaseExampleApplication)\n}\n}\n</code></pre> <p>Here\u2019s the <code>BugsnagLeakUploader</code>:</p> <pre><code>import android.app.Application\nimport com.bugsnag.android.Bugsnag\nimport com.bugsnag.android.Configuration\nimport com.bugsnag.android.ErrorTypes\nimport com.bugsnag.android.Event\nimport com.bugsnag.android.ThreadSendPolicy\nimport shark.HeapAnalysis\nimport shark.HeapAnalysisFailure\nimport shark.HeapAnalysisSuccess\nimport shark.Leak\nimport shark.LeakTrace\nimport shark.LeakTraceReference\nimport shark.LibraryLeak\n\nclass BugsnagLeakUploader(applicationContext: Application) {\n\nprivate val bugsnagClient = Bugsnag.start(\napplicationContext,\nConfiguration(\"YOUR_BUGSNAG_API_KEY\").apply {\nenabledErrorTypes = ErrorTypes(\nanrs = false,\nndkCrashes = false,\nunhandledExceptions = false,\nunhandledRejections = false\n)\nsendThreads = ThreadSendPolicy.NEVER\n}\n)\n\nfun upload(heapAnalysis: HeapAnalysis) {\nwhen (heapAnalysis) {\nis HeapAnalysisSuccess -&gt; {\nval allLeakTraces = heapAnalysis\n.allLeaks\n.toList()\n.flatMap { leak -&gt;\nleak.leakTraces.map { leakTrace -&gt; leak to leakTrace }\n}\nif (allLeakTraces.isEmpty()) {\n// Track how often we perform a heap analysis that yields no result.\nbugsnagClient.notify(NoLeakException()) { event -&gt;\nevent.addHeapAnalysis(heapAnalysis)\ntrue\n}\n} else {\nallLeakTraces.forEach { (leak, leakTrace) -&gt;\nval message = \"Memory leak: ${leak.shortDescription}. See LEAK tab.\"\nval exception = leakTrace.asFakeException(message)\nbugsnagClient.notify(exception) { event -&gt;\nevent.addHeapAnalysis(heapAnalysis)\nevent.addLeak(leak)\nevent.addLeakTrace(leakTrace)\nevent.groupingHash = leak.signature\ntrue\n}\n}\n}\n}\nis HeapAnalysisFailure -&gt; {\n// Please file any reported failure to\n// https://github.com/square/leakcanary/issues\nbugsnagClient.notify(heapAnalysis.exception)\n}\n}\n}\n\nclass NoLeakException : RuntimeException()\n\nprivate fun Event.addHeapAnalysis(heapAnalysis: HeapAnalysisSuccess) {\naddMetadata(\"Leak\", \"heapDumpPath\", heapAnalysis.heapDumpFile.absolutePath)\nheapAnalysis.metadata.forEach { (key, value) -&gt;\naddMetadata(\"Leak\", key, value)\n}\naddMetadata(\"Leak\", \"analysisDurationMs\", heapAnalysis.analysisDurationMillis)\n}\n\nprivate fun Event.addLeak(leak: Leak) {\naddMetadata(\"Leak\", \"libraryLeak\", leak is LibraryLeak)\nif (leak is LibraryLeak) {\naddMetadata(\"Leak\", \"libraryLeakPattern\", leak.pattern.toString())\naddMetadata(\"Leak\", \"libraryLeakDescription\", leak.description)\n}\n}\n\nprivate fun Event.addLeakTrace(leakTrace: LeakTrace) {\naddMetadata(\"Leak\", \"retainedHeapByteSize\", leakTrace.retainedHeapByteSize)\naddMetadata(\"Leak\", \"signature\", leakTrace.signature)\naddMetadata(\"Leak\", \"leakTrace\", leakTrace.toString())\n}\n\nprivate fun LeakTrace.asFakeException(message: String): RuntimeException {\nval exception = RuntimeException(message)\nval stackTrace = mutableListOf&lt;StackTraceElement&gt;()\nstackTrace.add(StackTraceElement(\"GcRoot\", gcRootType.name, \"GcRoot.kt\", 42))\nfor (cause in referencePath) {\nstackTrace.add(buildStackTraceElement(cause))\n}\nexception.stackTrace = stackTrace.toTypedArray()\nreturn exception\n}\n\nprivate fun buildStackTraceElement(reference: LeakTraceReference): StackTraceElement {\nval file = reference.owningClassName.substringAfterLast(\".\") + \".kt\"\nreturn StackTraceElement(reference.owningClassName, reference.referenceDisplayName, file, 42)\n}\n}\n</code></pre>"},{"location":"recipes/","title":"Code Recipes","text":"<p>This page contains code recipes to customize LeakCanary to your needs. Read through the section titles and cook your own meal! Also don\u2019t forget to check out the FAQ.</p> <p>Bug</p> <p>If you think a recipe might be missing or you\u2019re not sure that what you\u2019re trying to achieve is possible with the current APIs, please file an issue. Your feedback helps us make LeakCanary better for the entire community.</p>"},{"location":"recipes/#watching-objects-with-a-lifecycle","title":"Watching objects with a lifecycle","text":"<p>The default configuration of LeakCanary will automatically watch Activity, Fragment, Fragment View and ViewModel instances.</p> <p>In your application, you may have other objects with a lifecycle, such as services, Dagger components, etc. Use AppWatcher.objectWatcher to watch instances that should be garbage collected:</p> <pre><code>class MyService : Service {\n\n// ...\n\noverride fun onDestroy() {\nsuper.onDestroy()\nAppWatcher.objectWatcher.watch(\nwatchedObject = this,\ndescription = \"MyService received Service#onDestroy() callback\"\n)\n}\n}\n</code></pre>"},{"location":"recipes/#configuration","title":"Configuration","text":"<p>LeakCanary has a default configuration that works well for most apps. You can also customize it to your needs. The LeakCanary configuration is held by two singleton objects (<code>AppWatcher</code> and <code>LeakCanary</code>) and can be updated at any time. Most developers configure LeakCanary in their debug Application class:</p> <pre><code>class DebugExampleApplication : ExampleApplication() {\n\noverride fun onCreate() {\nsuper.onCreate()\nAppWatcher.config = AppWatcher.config.copy(watchFragmentViews = false)\n}\n}\n</code></pre> <p>Info</p> <p>Create a debug application class in your <code>src/debug/java</code> folder. Don\u2019t forget to also register it in <code>src/debug/AndroidManifest.xml</code>.</p> <p>To customize the detection of retained objects at runtime, specify the watchers you wish to install via AppWatcher.manualInstall():</p> <pre><code>val watchersToInstall = AppWatcher.appDefaultWatchers(this)\n.filter { it !is FragmentAndViewModelWatcher }\nAppWatcher.manualInstall(\napplication = this,\nwatchersToInstall = watchersToInstall\n)\n</code></pre> <p>To customize the heap dumping &amp; analysis, update LeakCanary.config:</p> <pre><code>LeakCanary.config = LeakCanary.config.copy(retainedVisibleThreshold = 3)\n</code></pre> <p>Java</p> <p>In Java, use LeakCanary.Config.Builder instead:</p> <pre><code>LeakCanary.Config config = LeakCanary.getConfig().newBuilder()\n.retainedVisibleThreshold(3)\n.build();\nLeakCanary.setConfig(config);\n</code></pre> <p>Configure the LeakCanary UI by overriding the following resources:</p> <ul> <li><code>mipmap/leak_canary_icon</code> see Icon and label</li> <li><code>string/leak_canary_display_activity_label</code> see Icon and label</li> <li><code>bool/leak_canary_add_dynamic_shortcut</code> see Disabling LeakCanary</li> <li><code>bool/leak_canary_add_launcher_icon</code> see Disabling LeakCanary</li> <li><code>layout/leak_canary_heap_dump_toast</code> the layout for the toast shown when the heap is dumped</li> </ul>"},{"location":"recipes/#disabling-leakcanary","title":"Disabling LeakCanary","text":"<p>Sometimes it\u2019s necessary to disable LeakCanary temporarily, for example for a product demo or when running performance tests. You have different options, depending on what you\u2019re trying to achieve:</p> <ul> <li>Create a build variant that does not include the LeakCanary dependencies, see Setting up LeakCanary for different product flavors.</li> <li>Disable the heap dumping &amp; analysis: <code>LeakCanary.config = LeakCanary.config.copy(dumpHeap = false)</code>.</li> <li>Hide the leak display activity launcher icon: override <code>R.bool.leak_canary_add_launcher_icon</code> or call <code>LeakCanary.showLeakDisplayActivityLauncherIcon(false)</code></li> </ul> <p>Info</p> <p>When you set <code>LeakCanary.Config.dumpHeap</code> to <code>false</code>, <code>AppWatcher.objectWatcher</code> will still keep track of retained objects, and LeakCanary will look for these objects when you change <code>LeakCanary.Config.dumpHeap</code> back to <code>true</code>.</p>"},{"location":"recipes/#leakcanary-test-environment-detection","title":"LeakCanary test environment detection","text":"<p>By default, LeakCanary will look for the <code>org.junit.Test</code> class in your classpath and if found, will disable itself to avoid running in tests. However, some apps may ship JUnit in their debug classpaths (for example, when using OkHttp\u2019s MockWebServer) so we offer a way to customise the class that is used to determine that the app is running in a test environment.</p> <pre><code>&lt;resources&gt;\n&lt;string name=\"leak_canary_test_class_name\"&gt;assertk.Assert&lt;/string&gt;\n&lt;/resources&gt;\n</code></pre>"},{"location":"recipes/#counting-retained-instances-in-release-builds","title":"Counting retained instances in release builds","text":"<p>The <code>com.squareup.leakcanary:leakcanary-android</code> dependency should only be used in debug builds. It depends on <code>com.squareup.leakcanary:leakcanary-object-watcher-android</code> which you can use in release builds to track and count retained instances.</p> <p>In your <code>build.gradle</code>:</p> <pre><code>dependencies {\n  implementation 'com.squareup.leakcanary:leakcanary-object-watcher-android:2.14'\n}\n</code></pre> <p>In your leak reporting code: <pre><code>val retainedInstanceCount = AppWatcher.objectWatcher.retainedObjectCount\n</code></pre></p>"},{"location":"recipes/#leakcanary-in-release-builds","title":"LeakCanary in release builds","text":"<p>We do not recommend including LeakCanary in release builds, as it could negatively impact the experience of your customers. To avoid accidentally including the <code>com.squareup.leakcanary:leakcanary-android</code> dependency in a release build, LeakCanary crashes during initialization if the APK is not debuggable. You may have a good reason to create a non debuggable build that includes LeakCanary, for example for a QA build. If necessary, the crashing check can be disabled by overriding the <code>bool/leak_canary_allow_in_non_debuggable_build</code> resource, e.g. by creating a file under <code>res/values</code> with the following contents:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;resources&gt;\n&lt;bool name=\"leak_canary_allow_in_non_debuggable_build\"&gt;true&lt;/bool&gt;\n&lt;/resources&gt;\n</code></pre>"},{"location":"recipes/#android-tv","title":"Android TV","text":"<p>LeakCanary works on Android TV devices (FireTV, Nexus player, Nvidia Shield, MiBox, etc.) without any additional setup. However, there are couple things you need to be aware of:</p> <ul> <li>Android TV doesn\u2019t have notifications. LeakCanary will display Toast messages when objects become retained and when leak analysis completes. You can also check Logcat for more details.</li> <li>Due to lack of notifications, the only way to manually trigger a heap dump is to background the app.</li> <li>There\u2019s a bug on API 26+ devices that prevents the activity that displays leaks from appearing in apps list. As a workaround, LeakCanary prints an <code>adb shell</code> command in Logcat after heap dump analysis that launches leak list activity:     <pre><code>adb shell am start -n \"com.your.package.name/leakcanary.internal.activity.LeakLauncherActivity\"\n</code></pre></li> <li>Some Android TV devices have very little memory available per app process and this might impact LeakCanary. Running the LeakCanary analysis in a separate process might help in such cases.</li> </ul>"},{"location":"recipes/#icon-and-label","title":"Icon and label","text":"<p>The activity that displays leaks comes with a default icon and label, which you can change by providing <code>R.mipmap.leak_canary_icon</code> and <code>R.string.leak_canary_display_activity_label</code> in your app:</p> <pre><code>res/\n  mipmap-hdpi/\n    leak_canary_icon.png\n  mipmap-mdpi/\n    leak_canary_icon.png\n  mipmap-xhdpi/\n    leak_canary_icon.png\n  mipmap-xxhdpi/\n    leak_canary_icon.png\n  mipmap-xxxhdpi/\n    leak_canary_icon.png\n   mipmap-anydpi-v26/\n     leak_canary_icon.xml\n</code></pre> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;resources&gt;\n&lt;string name=\"leak_canary_display_activity_label\"&gt;MyLeaks&lt;/string&gt;\n&lt;/resources&gt;\n</code></pre>"},{"location":"recipes/#matching-known-library-leaks","title":"Matching known library leaks","text":"<p>Set LeakCanary.Config.referenceMatchers to a list that builds on top of AndroidReferenceMatchers.appDefaults:</p> <pre><code>class DebugExampleApplication : ExampleApplication() {\n\noverride fun onCreate() {\nsuper.onCreate()\nLeakCanary.config = LeakCanary.config.copy(\nreferenceMatchers = AndroidReferenceMatchers.appDefaults +\nAndroidReferenceMatchers.staticFieldLeak(\nclassName = \"com.samsing.SomeSingleton\",\nfieldName = \"sContext\",\ndescription = \"SomeSingleton has a static field leaking a context.\",\npatternApplies = {\nmanufacturer == \"Samsing\" &amp;&amp; sdkInt == 26\n}\n)\n)\n}\n}\n</code></pre>"},{"location":"recipes/#ignoring-specific-activities-or-fragment-classes","title":"Ignoring specific activities or fragment classes","text":"<p>Sometimes a 3rd party library provides its own activities or fragments which contain a number of bugs leading to leaks of those specific 3rd party activities and fragments. You should push hard on that library to fix their memory leaks as it\u2019s directly impacting your application. That being said, until those are fixed, you have two options:</p> <ol> <li>Add the specific leaks as known library leaks (see Matching known library leaks). LeakCanary will run when those leaks are detected and then report them as known library leaks.</li> <li>Disable LeakCanary automatic activity or fragment watching (e.g. <code>AppWatcher.config = AppWatcher.config.copy(watchActivities = false)</code>) and then manually pass objects to <code>AppWatcher.objectWatcher.watch</code>.</li> </ol>"},{"location":"recipes/#identifying-leaking-objects-and-labeling-objects","title":"Identifying leaking objects and labeling objects","text":"<pre><code>class DebugExampleApplication : ExampleApplication() {\n\noverride fun onCreate() {\nsuper.onCreate()\nval addEntityIdLabel = ObjectInspector { reporter -&gt;\nreporter.whenInstanceOf(\"com.example.DbEntity\") { instance -&gt;\nval databaseIdField = instance[\"com.example.DbEntity\", \"databaseId\"]!!\nval databaseId = databaseIdField.value.asInt!!\nlabels += \"DbEntity.databaseId = $databaseId\"\n}\n}\n\nval singletonsInspector =\nAppSingletonInspector(\"com.example.MySingleton\", \"com.example.OtherSingleton\")\n\nval mmvmInspector = ObjectInspector { reporter -&gt;\nreporter.whenInstanceOf(\"com.mmvm.SomeViewModel\") { instance -&gt;\nval destroyedField = instance[\"com.mmvm.SomeViewModel\", \"destroyed\"]!!\nif (destroyedField.value.asBoolean!!) {\nleakingReasons += \"SomeViewModel.destroyed is true\"\n} else {\nnotLeakingReasons += \"SomeViewModel.destroyed is false\"\n}\n}\n}\n\nLeakCanary.config = LeakCanary.config.copy(\nobjectInspectors = AndroidObjectInspectors.appDefaults +\nlistOf(addObjectIdLabel, singletonsInspector, mmvmInspector)\n)\n}\n}\n</code></pre>"},{"location":"recipes/#running-the-leakcanary-analysis-in-a-separate-process","title":"Running the LeakCanary analysis in a separate process","text":"<p>LeakCanary runs in your main app process. LeakCanary 2 is optimized to keep memory usage low while analysing and runs in a background thread with priority <code>Process.THREAD_PRIORITY_BACKGROUND</code>. If you find that LeakCanary is still using too much memory or impacting the app process performance, you can configure it to run the analysis in a separate process.</p> <p>All you have to do is replace the <code>leakcanary-android</code> dependency with <code>leakcanary-android-process</code>:</p> <pre><code>dependencies {\n// debugImplementation 'com.squareup.leakcanary:leakcanary-android:${version}'\ndebugImplementation 'com.squareup.leakcanary:leakcanary-android-process:${version}'\n}\n</code></pre> <p>You can call LeakCanaryProcess.isInAnalyzerProcess to check if your Application class is being created in the LeakCanary process. This is useful when configuring libraries like Firebase that may crash when running in an unexpected process.</p>"},{"location":"recipes/#setting-up-leakcanary-for-different-product-flavors","title":"Setting up LeakCanary for different product flavors","text":"<p>You can setup LeakCanary to run in a specific product flavors of your app. For example, create:</p> <pre><code>android {\n  flavorDimensions \"default\"\n  productFlavors {\n    prod {\n      // ...\n    }\n    qa {\n      // ...\n    }\n    dev {\n      // ...\n    }\n  }\n}\n</code></pre> <p>Then, define a custom configuration for the flavor for which you want to enable LeakCanary:</p> <pre><code>android {\n  // ...\n}\nconfigurations {\n    devDebugImplementation {}\n}\n</code></pre> <p>You can now add the LeakCanary dependency for that configuration:</p> <pre><code>dependencies {\n  devDebugImplementation \"com.squareup.leakcanary:leakcanary-android:${version}\"\n}\n</code></pre>"},{"location":"recipes/#extracting-metadata-from-the-heap-dump","title":"Extracting metadata from the heap dump","text":"<p>LeakCanary.Config.metadataExtractor extracts metadata from a heap dump. The metadata is then available in <code>HeapAnalysisSuccess.metadata</code>. <code>LeakCanary.Config.metadataExtractor</code> defaults to <code>AndroidMetadataExtractor</code> but you can replace it to extract additional metadata from the hprof.</p> <p>For example, if you want to include the app version name in your heap analysis reports, you need to first store it in memory (e.g. in a static field) and then you can retrieve it in <code>MetadataExtractor</code>.</p> <pre><code>class DebugExampleApplication : ExampleApplication() {\n\ncompanion object {\n@JvmStatic\nlateinit var savedVersionName: String\n}\n\noverride fun onCreate() {\nsuper.onCreate()\n\nval packageInfo = packageManager.getPackageInfo(packageName, 0)\nsavedVersionName = packageInfo.versionName\n\nLeakCanary.config = LeakCanary.config.copy(\nmetadataExtractor = MetadataExtractor { graph -&gt;\nval companionClass =\ngraph.findClassByName(\"com.example.DebugExampleApplication\")!!\n\nval versionNameField = companionClass[\"savedVersionName\"]!!\nval versionName = versionNameField.valueAsInstance!!.readAsJavaString()!!\n\nval defaultMetadata = AndroidMetadataExtractor.extractMetadata(graph)\n\nmapOf(\"App Version Name\" to versionName) + defaultMetadata\n})\n}\n}\n</code></pre>"},{"location":"recipes/#using-leakcanary-with-obfuscated-apps","title":"Using LeakCanary with obfuscated apps","text":"<p>If obfuscation is turned on then leak traces will be obfuscated. It\u2019s possible to automatically deobfuscate leak traces by using a deobfuscation gradle plugin provided by LeakCanary.</p> <p>You have to add a plugin dependency in your root <code>build.gradle</code> file:</p> <pre><code>buildscript {\ndependencies {\nclasspath 'com.squareup.leakcanary:leakcanary-deobfuscation-gradle-plugin:${version}'\n}\n}\n</code></pre> <p>And then you need to apply and configure the plugin in your app (or library) specific <code>build.gradle</code> file:</p> <pre><code>apply plugin: 'com.android.application'\napply plugin: 'com.squareup.leakcanary.deobfuscation'\n\nleakCanary {\n// LeakCanary needs to know which variants have obfuscation turned on\nfilterObfuscatedVariants { variant -&gt;\nvariant.name == \"debug\"\n}\n}\n</code></pre> <p>Now you can run LeakCanary on an obfuscated app and leak traces will be automatically deobfuscated.</p> <p>Important: never use this plugin on a release variant. This plugin copies obfuscation mapping file and puts it inside the .apk, so if you use it on release build then the obfuscation becomes pointless because the code can be easily deobfuscated using mapping file.</p> <p>Warning: R8 (Google Proguard replacement) can now understand Kotlin language constructs but the side effect is that mapping files can get very large (a couple dozen megabytes). It means that the size of .apk containing copied mapping file will increase as well. This is another reason for not using this plugin on a release variant.</p>"},{"location":"recipes/#detecting-leaks-in-jvm-applications","title":"Detecting leaks in JVM applications","text":"<p>While LeakCanary was designed to work out of the box on Android, it can run on any JVM with a bit of configuration.</p> <p>Add the ObjectWatcher and Shark dependencies to your build file:</p> <pre><code>dependencies {\nimplementation 'com.squareup.leakcanary:leakcanary-object-watcher:2.14'\nimplementation 'com.squareup.leakcanary:shark:2.14'\n}\n</code></pre> <p>Define a <code>HotSpotHeapDumper</code> to dump the heap:</p> <pre><code>import com.sun.management.HotSpotDiagnosticMXBean\nimport java.lang.management.ManagementFactory\n\nobject HotSpotHeapDumper {\nprivate val mBean: HotSpotDiagnosticMXBean by lazy {\nval server = ManagementFactory.getPlatformMBeanServer()\nManagementFactory.newPlatformMXBeanProxy(\nserver,\n\"com.sun.management:type=HotSpotDiagnostic\",\nHotSpotDiagnosticMXBean::class.java\n)\n}\n\nfun dumpHeap(fileName: String) {\nmBean.dumpHeap(fileName, LIVE)\n}\n\nprivate const val LIVE = true\n}\n</code></pre> <p>Define a <code>JvmHeapAnalyzer</code> to analyze the heap when objects are retained and print the result to the console:</p> <pre><code>import leakcanary.GcTrigger\nimport leakcanary.ObjectWatcher\nimport leakcanary.OnObjectRetainedListener\nimport java.io.File\nimport java.text.SimpleDateFormat\nimport java.util.Date\nimport java.util.Locale.US\n\nclass JvmHeapAnalyzer(private val objectWatcher: ObjectWatcher) :\nOnObjectRetainedListener {\n\nprivate val fileNameFormat = SimpleDateFormat(DATE_PATTERN, US)\n\noverride fun onObjectRetained() {\nGcTrigger.Default.runGc()\nif (objectWatcher.retainedObjectCount == 0) {\nreturn\n}\nval fileName = fileNameFormat.format(Date())\nval hprofFile = File(fileName)\n\nprintln(\"Dumping the heap to ${hprofFile.absolutePath}\")\nHotSpotHeapDumper.dumpHeap(hprofFile.absolutePath)\n\nval analyzer = HeapAnalyzer(\nOnAnalysisProgressListener { step -&gt;\nprintln(\"Analysis in progress, working on: ${step.name}\")\n})\n\nval heapDumpAnalysis = analyzer.analyze(\nheapDumpFile = hprofFile,\nleakingObjectFinder = KeyedWeakReferenceFinder,\ncomputeRetainedHeapSize = true,\nobjectInspectors = ObjectInspectors.jdkDefaults\n)\nprintln(heapDumpAnalysis)\n}\ncompanion object {\nprivate const val DATE_PATTERN = \"yyyy-MM-dd_HH-mm-ss_SSS'.hprof'\"\n}\n}\n</code></pre> <p>Create an <code>ObjectWatcher</code> instance and configure it to watch objects for 5 seconds before notifying a <code>JvmHeapAnalyzer</code> instance:</p> <pre><code>val scheduledExecutor = Executors.newSingleThreadScheduledExecutor()\nval objectWatcher = ObjectWatcher(\nclock = Clock {\nSystem.currentTimeMillis()\n},\ncheckRetainedExecutor = Executor { command -&gt;\nscheduledExecutor.schedule(command, 5, SECONDS)\n}\n)\n\nval heapAnalyzer = JvmHeapAnalyzer(objectWatcher)\nobjectWatcher.addOnObjectRetainedListener(heapAnalyzer)\n</code></pre> <p>Pass objects that you expect to be garbage collected (e.g. closed resources) to the <code>ObjectWatcher</code> instance:</p> <pre><code>objectWatcher.watch(\nwatchedObject = closedResource,\ndescription = \"$closedResource is closed and should be garbage collected\"\n)\n</code></pre> <p>If you end up using LeakCanary on a JVM, the community will definitely benefit from your experience, so don\u2019t hesitate to let us know!</p>"},{"location":"recipes/#packagemanagergetlaunchintentforpackage-returns-leaklauncheractivity","title":"PackageManager.getLaunchIntentForPackage() returns LeakLauncherActivity","text":"<p>LeakCanary adds a main activity that has a Intent#CATEGORY_LAUNCHER category. PackageManager.getLaunchIntentForPackage() looks for a main activity in the category <code>Intent#CATEGORY_INFO</code>, and next for a main activity in the category <code>Intent#CATEGORY_LAUNCHER</code>. <code>PackageManager.getLaunchIntentForPackage()</code> returns the first activity that matches in the merged manifest of your app. If your app relies on <code>PackageManager.getLaunchIntentForPackage()</code>, you have two options:</p> <ul> <li>Add <code>Intent#CATEGORY_INFO</code> to your main activity intent filter, so that it gets picked up first. This is what the Android documentation recommends.</li> <li>Disable the leakcanary launcher activity by setting the <code>leak_canary_add_launcher_icon</code> resource boolean to false.</li> </ul>"},{"location":"recorded-presentations/","title":"Recorded Presentations","text":"<ul> <li>Live leak investigations, investigating leaks on Stack Overflow and fixes for AOSP leaks</li> <li>Fixing leaks in Firefox</li> <li>Shark: Diving into the guts of LeakCanary\u2019s Hprof parser</li> <li>LeakCanary 2: Leaner, Better, Faster, Kotliner!</li> <li>LeakCanary, then what? Nuking Nasty Memory Leaks</li> <li>Memory Leak Hunt, a live investigation.</li> <li>Installing LeakCanary (LeakCanary 1.5)</li> <li>How to use LeakCanary</li> </ul> <p>Your presentation should be here, please update this list! Any technical level welcome.</p>"},{"location":"releasing/","title":"Releasing LeakCanary","text":""},{"location":"releasing/#preparing-the-release-environment","title":"Preparing the release environment","text":""},{"location":"releasing/#set-up-your-sonatype-ossrh-account","title":"Set up your Sonatype OSSRH account","text":"<ul> <li>Create a Sonatype OSSRH JIRA account.</li> <li>Create a ticket to request access to the <code>com.squareup.leakcanary</code> project. Here\u2019s an example: OSSRH-54959.</li> <li>Then ask someone with deployer role from the LeakCanary team to confirm access.</li> </ul>"},{"location":"releasing/#set-up-your-signing-key","title":"Set up your signing key","text":"<pre><code># Create a new key\ngpg --gen-key\n# List local keys. Key id is last 8 characters\ngpg -K\ncd ~/.gnupg\n# Export key locally\ngpg --export-secret-keys -o secring.gpg\n# Upload key to Ubuntu servers\ngpg --send-keys --keyserver keyserver.ubuntu.com &lt;KEY ID&gt;\n# Confirm the key can now be found\ngpg --recv-keys --keyserver keyserver.ubuntu.com &lt;KEY ID&gt;\n</code></pre>"},{"location":"releasing/#set-up-your-home-gradleproperties","title":"Set up your home gradle.properties","text":"<p>Add this to your <code>~/.gradle/gradle.properties</code>:</p> <pre><code>signing.keyId=&lt;KEY ID&gt;\nsigning.password=&lt;KEY PASSWORD&gt;\nsigning.secretKeyRingFile=/Users/YOUR_USERNAME_/.gnupg/secring.gpg\nSONATYPE_NEXUS_USERNAME=&lt;SONATYPE_USERNAME&gt;\nSONATYPE_NEXUS_PASSWORD=&lt;SONATYPE_PASSWORD&gt;\n</code></pre>"},{"location":"releasing/#set-up-the-google-analytics-docs-key","title":"Set up the Google Analytics docs key","text":"<p>Add this to your <code>~/.bashrc</code>:</p> <pre><code>export LEAKCANARY_GOOGLE_ANALYTICS_KEY=\"UA-142834539-1\"\n</code></pre>"},{"location":"releasing/#set-up-github-cli","title":"Set up GitHub CLI","text":"<p>Install GitHub CLI</p> <pre><code>brew install gh\n</code></pre> <p>Install jq, a CLI Json processor</p> <pre><code>brew install jq\n</code></pre> <p>Set up aliases for milestone management:</p> <pre><code>gh alias set listOpenMilestones \"api graphql -F owner=':owner' -F name=':repo' -f query='\n    query ListOpenMilestones(\\$name: String\\!, \\$owner: String\\!) {\n        repository(owner: \\$owner, name: \\$name) {\n            milestones(first: 100, states: OPEN) {\n                nodes {\n                    title\n                    number\n                    description\n                    dueOn\n                    url\n                    state\n                    closed\n                    closedAt\n                    updatedAt\n                }\n            }\n        }\n    }\n'\"\n\ngh alias set --shell createMilestone \"gh api --method POST repos/:owner/:repo/milestones --input - | jq '{ html_url: .html_url, state: .state, created_at: .created_at }'\"\n\ngh alias set --shell closeMilestone \"echo '{\\\"state\\\": \\\"closed\\\"}' | gh api --method PATCH repos/:owner/:repo/milestones/\\$1 --input - | jq '{ html_url: .html_url, state: .state, closed_at: .closed_at }'\"\n</code></pre>"},{"location":"releasing/#install-or-update-the-doc-generation-dependencies","title":"Install or update the doc generation dependencies","text":"<pre><code>python3 -m venv venv\nsource venv/bin/activate\npip3 install --requirement docs/requirements.txt\n</code></pre>"},{"location":"releasing/#releasing","title":"Releasing","text":"<ul> <li> <p>Create a local release branch from <code>main</code> <pre><code>git checkout main &amp;&amp; \\\ngit pull &amp;&amp; \\\ngit checkout -b release_3.0-alpha-5\n</code></pre></p> </li> <li> <p>Update <code>VERSION_NAME</code> in <code>gradle.properties</code> (remove <code>-SNAPSHOT</code>) <pre><code>sed -i '' 's/VERSION_NAME=3.0-alpha-5-SNAPSHOT/VERSION_NAME=3.0-alpha-5/' gradle.properties\n</code></pre></p> </li> <li> <p>Update the current version and next version in <code>mkdocs.yml</code> <pre><code>sed -i '' 's/3.0-alpha-5/NEXT/' mkdocs.yml\nsed -i '' 's/2.14/3.0-alpha-5/' mkdocs.yml\n</code></pre></p> </li> <li> <p>Create the release <pre><code>git commit -am \"Prepare 3.0-alpha-5 release\" &amp;&amp; \\\n./gradlew clean &amp;&amp; \\\n./gradlew build &amp;&amp; \\\ngit tag v3.0-alpha-5 &amp;&amp; \\\ngit push origin v3.0-alpha-5 &amp;&amp; \\\n./gradlew publish --no-daemon --no-parallel &amp;&amp; \\\n./gradlew closeAndReleaseRepository &amp;&amp; \\\n./gradlew shark:shark-cli:distZip\n</code></pre></p> </li> </ul> <p>Note: if anything goes wrong, you can manually drop the release at https://s01.oss.sonatype.org/</p> <ul> <li>Merge back to main <pre><code>git checkout main &amp;&amp; \\\ngit pull &amp;&amp; \\\ngit merge --no-ff release_3.0-alpha-5\n</code></pre></li> <li> <p>Update <code>VERSION_NAME</code> in <code>gradle.properties</code> (increase version and add <code>-SNAPSHOT</code>) <pre><code>sed -i '' 's/VERSION_NAME=3.0-alpha-5/VERSION_NAME=NEXT-SNAPSHOT/' gradle.properties\n</code></pre></p> </li> <li> <p>Generate the Dokka docs <pre><code>rm -rf docs/api &amp;&amp; ./gradlew siteDokka\n</code></pre></p> </li> <li> <p>Update the changelog (commit list) <pre><code>mate docs/changelog.md\n</code></pre></p> </li> <li> <p>Deploy the docs locally then open the changelog and check everything looks good <pre><code>source venv/bin/activate &amp;&amp; \\\nmkdocs serve\n</code></pre></p> </li> <li> <p>Finish up the release</p> </li> </ul> <pre><code>git commit -am \"Prepare for next development iteration\" &amp;&amp; \\\ngit push &amp;&amp; \\\nsource venv/bin/activate &amp;&amp; \\\nmkdocs gh-deploy &amp;&amp; \\\ngh release create v3.0-alpha-5 ./shark/shark-cli/build/distributions/shark-cli-3.0-alpha-5.zip --title v3.0-alpha-5 --notes 'See [Change Log](https://square.github.io/leakcanary/changelog)' &amp;&amp; \\\ngh listOpenMilestones | jq '.data.repository.milestones.nodes[0].number' | xargs gh closeMilestone &amp;&amp; \\\necho '{\n  \"title\": \"REPLACE_WITH_NEXT_VERSION_NUMBER\",\n  \"state\": \"open\",\n  \"description\": \"\"\n}' | gh createMilestone\n</code></pre> <ul> <li> <p>Open the v3.0-alpha-5 release to confirm everything looks good.</p> </li> <li> <p>Upload shark-cli to brew: <pre><code>brew bump-formula-pr --url https://github.com/square/leakcanary/releases/download/v3.0-alpha-5/shark-cli-3.0-alpha-5.zip leakcanary-shark\n</code></pre></p> </li> <li> <p>Wait for the release to be available on Maven Central.</p> </li> <li>Tell your friends, update all of your apps, and tweet the new release. As a nice extra touch, mention external contributions.</li> </ul>"},{"location":"shark/","title":"Shark \ud83e\udd88","text":"<p>Shark: Smart Heap Analysis Reports for Kotlin</p> <p> </p> <p>Shark is the heap analyzer that powers LeakCanary 2. It\u2019s a Kotlin standalone heap analysis library that runs at high speed with a low memory footprint.</p> <p>Shark is released in layers:</p> <ol> <li>Shark Hprof: Read and write records in hprof files.</li> <li>Shark Graph: Navigate the heap object graph.</li> <li>Shark: Generate heap analysis reports.</li> <li>Shark Android: Android heuristics to generate tailored heap analysis reports.</li> <li>Shark CLI: Analyze the heap of debuggable apps installed on an Android device connected to your desktop. The output is similar to the output of LeakCanary, except you don\u2019t have to add the LeakCanary dependency to your app.</li> <li>LeakCanary: Builds on top. It automatically watches destroyed activities and fragments, triggers a heap dump, runs Shark Android and then displays the result.</li> </ol> <p>A few more things:</p> <ul> <li>Shark is built on top of Okio. Okio makes it easy to parse heap dumps efficiently.</li> <li>Shark is a 100% Kotlin library, and Kotlin is essential to its design, because Shark relies heavily on sealed classes and sequences to save memory.</li> <li>Shark has the unique ability to help narrow down the cause of memory leaks through platform specific heuristics.</li> <li>Shark is heavily tested (80% test coverage).</li> <li>Shark can run in both Java and Android VMs, with no other dependency than Okio and Kotlin.</li> <li>Shark can analyze both Java and Android VM hprof files.</li> <li>Shark can deobfuscate hprof records if it has access to obfuscation mapping file.</li> </ul>"},{"location":"shark/#shark-cli","title":"Shark CLI","text":"<p>The Shark Command Line Interface (CLI) enables you to analyze heaps directly from your computer. It can dump the heap of an app installed on a connected Android device, analyze it, and even strip a heap dump of any sensitive data (e.g. PII, passwords or encryption keys) which is useful when sharing a heap dump.</p> <p>Install it via Homebrew:</p> <pre><code>brew install leakcanary-shark\n</code></pre> <p>You can also download it here.</p> <p>You can then look for leaks in apps on any connected device, for example: </p> <pre><code>$ shark-cli --device emulator-5554 --process com.example.app.debug analyze\n</code></pre> <p>Info</p> <p><code>shark-cli</code> works with all debuggable apps, even if they don\u2019t include the <code>leakcanary-android</code> dependency.</p> <p>Run <code>shark-cli</code> to see usage instructions:</p> <pre><code>$ shark-cli\n\nUsage: shark-cli [OPTIONS] COMMAND [ARGS]...\n\n                   ^`.                 .=\"\"=.\n   ^_              \\  \\               / _  _ \\\n   \\ \\             {   \\             |  d  b  |\n   {  \\           /     `~~~--__     \\   /\\   /\n   {   \\___----~~'              `~~-_/'-=\\/=-'\\,\n    \\                         /// a  `~.      \\ \\\n    / /~~~~-, ,__.    ,      ///  __,,,,)      \\ |\n    \\/      \\/    `~~~;   ,---~~-_`/ \\        / \\/\n                     /   /            '.    .'\n                    '._.'             _|`~~`|_\n                                      /|\\  /|\\\n\nOptions:\n  -p, --process TEXT              Full or partial name of a process, e.g.\n                                  \"example\" would match \"com.example.app\"\n  -d, --device ID                 device/emulator id\n  -m, --obfuscation-mapping PATH  path to obfuscation mapping file\n  --verbose / --no-verbose        provide additional details as to what\n                                  shark-cli is doing\n  -h, --hprof FILE                path to a .hprof file\n  --help                          Show this message and exit\n\nCommands:\n  interactive   Explore a heap dump.\n  analyze       Analyze a heap dump.\n  dump-process  Dump the heap and pull the hprof file.\n  strip-hprof   Replace all primitive arrays from the provided heap dump with\n                arrays of zeroes and generate a new \"-stripped.hprof\" file.\n</code></pre>"},{"location":"shark/#shark-code-examples","title":"Shark code examples","text":""},{"location":"shark/#reading-records-in-a-hprof-file","title":"Reading records in a hprof file","text":"<pre><code>dependencies {\nimplementation 'com.squareup.leakcanary:shark-hprof:$sharkVersion'\n}\n</code></pre> <pre><code>// Prints all class and field names\nHprof.open(heapDumpFile)\n.use { hprof -&gt;\nhprof.reader.readHprofRecords(\nrecordTypes = setOf(StringRecord::class),\nlistener = OnHprofRecordListener { position, record -&gt;\nprintln((record as StringRecord).string)\n})\n}\n</code></pre>"},{"location":"shark/#navigating-the-heap-object-graph","title":"Navigating the heap object graph","text":"<pre><code>dependencies {\nimplementation 'com.squareup.leakcanary:shark-graph:$sharkVersion'\n}\n</code></pre> <pre><code>// Prints all thread names\nHprof.open(heapDumpFile)\n.use { hprof -&gt;\nval heapGraph = HprofHeapGraph.indexHprof(hprof)\nval threadClass = heapGraph.findClassByName(\"java.lang.Thread\")!!\nval threadNames: Sequence&lt;String&gt; = threadClass.instances.map { instance -&gt;\nval nameField = instance[\"java.lang.Thread\", \"name\"]!!\nnameField.value.readAsJavaString()!!\n}\nthreadNames.forEach { println(it) }\n}\n</code></pre>"},{"location":"shark/#generating-a-heap-analysis-report","title":"Generating a heap analysis report","text":"<pre><code>dependencies {\nimplementation 'com.squareup.leakcanary:shark:$sharkVersion'\n}\n</code></pre> <pre><code>// Marks any instance of com.example.ThingWithLifecycle with\n// ThingWithLifecycle.destroyed=true as leaking\nval leakingObjectFilter = object : LeakingObjectFilter {\noverride fun isLeakingObject(heapObject: HeapObject): Boolean {\nreturn if (heapObject instanceOf \"com.example.ThingWithLifecycle\") {\nval instance = heapObject as HeapInstance\nval destroyedField = instance[\"com.example.ThingWithLifecycle\", \"destroyed\"]!!\ndestroyedField.value.asBoolean!!\n} else false\n}\n}\n\nval leakingObjectFinder = FilteringLeakingObjectFinder(listOf(leakingObjectFilter))\n\nval heapAnalysis = Hprof.open(heapDumpFile)\n.use { hprof -&gt;\nval heapGraph = HprofHeapGraph.indexHprof(hprof)\nval heapAnalyzer = HeapAnalyzer(AnalyzerProgressListener.NONE)\nheapAnalyzer.analyze(\nheapDumpFile = heapDumpFile,\ngraph = heapGraph,\nleakingObjectFinder = leakingObjectFinder,\n)\n}\nprintln(analysis)\n</code></pre>"},{"location":"shark/#generating-an-android-heap-analysis-report","title":"Generating an Android heap analysis report","text":"<pre><code>dependencies {\nimplementation 'com.squareup.leakcanary:shark-android:$sharkVersion'\n}\n</code></pre> <pre><code>val heapAnalyzer = HeapAnalyzer(AnalyzerProgressListener.NONE)\nval analysis = heapAnalyzer.checkForLeaks(\nheapDumpFile = heapDumpFile,\nreferenceMatchers = AndroidReferenceMatchers.appDefaults,\nobjectInspectors = AndroidObjectInspectors.appDefaults\n)\nprintln(analysis)\n</code></pre>"},{"location":"support/","title":"LeakCanary Support","text":"<p>If you\u2019re looking for help with LeakCanary:</p> <ul> <li>Learn the Fundamentals</li> <li>Try the code recipes</li> <li>Read the FAQ</li> <li>Watch recorded presentations</li> <li>Read blog articles</li> <li>Ask a question on StackOverflow</li> </ul>"},{"location":"ui-tests/","title":"Leak detection in UI tests","text":"<p>Running leak detection in UI tests means you can detect memory leaks automatically in Continuous Integration prior to new leaks being merged into the codebase.</p> <p>Test environment detection</p> <p>In debug builds, LeakCanary looks for retained instances continuously, freezes the VM to take a heap dump after a watched object has been retained for 5 seconds, then performs the analysis in a background thread and reports the result using notifications. That behavior isn\u2019t well suited for UI tests, so LeakCanary is automatically disabled when JUnit is on the runtime classpath (see test environment detection).</p>"},{"location":"ui-tests/#getting-started","title":"Getting started","text":"<p>LeakCanary provides an artifact dedicated to detecting leaks in UI tests:</p> <pre><code>androidTestImplementation 'com.squareup.leakcanary:leakcanary-android-instrumentation:2.14'\n// You still need to include the LeakCanary artifact in your app:\ndebugImplementation 'com.squareup.leakcanary:leakcanary-android:2.14'\n</code></pre> <p>You can then call <code>LeakAssertions.assertNoLeaks()</code> at any point in your tests to check for leaks:</p> <pre><code>class CartTest {\n\n@Test\nfun addItemToCart() {\n// ...\nLeakAssertions.assertNoLeaks()\n}\n}\n</code></pre> <p>If retained instances are detected, LeakCanary will dump and analyze the heap. If application leaks are found, <code>LeakAssertions.assertNoLeaks()</code> will throw a <code>NoLeakAssertionFailedError</code>.</p> <pre><code>leakcanary.NoLeakAssertionFailedError: Application memory leaks were detected:\n====================================\nHEAP ANALYSIS RESULT\n====================================\n1 APPLICATION LEAKS\n\n\u252c\u2500\u2500\u2500\n\u2502 GC Root: System class\n\u2502\n\u251c\u2500 com.example.MySingleton class\n\u2502    Leaking: NO (a class is never leaking)\n\u2502    \u2193 static MySingleton.leakedView\n\u2502                         ~~~~~~~~~~\n\u251c\u2500 android.widget.TextView instance\n\u2502    Leaking: YES (View.mContext references a destroyed activity)\n\u2502    \u2193 TextView.mContext\n\u2570\u2192 com.example.MainActivity instance\n     Leaking: YES (Activity#mDestroyed is true)\n====================================\n  at leakcanary.AndroidDetectLeaksAssert.assertNoLeaks(AndroidDetectLeaksAssert.kt:34)\n  at leakcanary.LeakAssertions.assertNoLeaks(LeakAssertions.kt:21)\n  at com.example.CartTest.addItemToCart(TuPeuxPasTest.kt:41)\n</code></pre> <p>Obfuscated instrumentation tests</p> <p>When running instrumentation tests against obfuscated release builds, the LeakCanary classes end up spread over the test APK and the main APK. Unfortunately there is a bug in the Android Gradle Plugin that leads to runtime crashes when running tests, because code from the main APK is changed without the using code in the test APK being updated accordingly. If you run into this issue, setting up the Keeper plugin should fix it.</p>"},{"location":"ui-tests/#test-rule","title":"Test rule","text":"<p>You can use the <code>DetectLeaksAfterTestSuccess</code> test rule to automatically call  <code>LeakAssertions.assertNoLeaks()</code> at the end of a test:</p> <pre><code>class CartTest {\n@get:Rule\nval rule = DetectLeaksAfterTestSuccess()\n\n@Test\nfun addItemToCart() {\n// ...\n}\n}\n</code></pre> <p>You can call also <code>LeakAssertions.assertNoLeaks()</code> as many times as you want in a single test:</p> <pre><code>class CartTest {\n@get:Rule\nval rule = DetectLeaksAfterTestSuccess()\n\n// This test has 3 leak assertions (2 in the test + 1 from the rule).\n@Test\nfun addItemToCart() {\n// ...\nLeakAssertions.assertNoLeaks()\n// ...\nLeakAssertions.assertNoLeaks()\n// ...\n}\n}\n</code></pre>"},{"location":"ui-tests/#skipping-leak-detection","title":"Skipping leak detection","text":"<p>Use <code>@SkipLeakDetection</code> to disable <code>LeakAssertions.assertNoLeaks()</code> calls:</p> <pre><code>class CartTest {\n@get:Rule\nval rule = DetectLeaksAfterTestSuccess()\n\n// This test will not perform any leak assertion.\n@SkipLeakDetection(\"See issue #1234\")\n@Test\nfun addItemToCart() {\n// ...\nLeakAssertions.assertNoLeaks()\n// ...\nLeakAssertions.assertNoLeaks()\n// ...\n}\n}\n</code></pre> <p>You can use tags to identify each <code>LeakAssertions.assertNoLeaks()</code> call and disable only a subset of these calls:</p> <pre><code>class CartTest {\n@get:Rule\nval rule = DetectLeaksAfterTestSuccess(tag = \"EndOfTest\")\n\n// This test will only perform the second leak assertion.\n@SkipLeakDetection(\"See issue #1234\", \"First Assertion\", \"EndOfTest\")\n@Test\nfun addItemToCart() {\n// ...\nLeakAssertions.assertNoLeak(tag = \"First Assertion\")\n// ...\nLeakAssertions.assertNoLeak(tag = \"Second Assertion\")\n// ...\n}\n}\n</code></pre> <p>Tags can be retrieved by calling <code>HeapAnalysisSuccess.assertionTag</code> and are also reported in the heap analysis result metadata:</p> <pre><code>====================================\nMETADATA\n\nPlease include this in bug reports and Stack Overflow questions.\n\nBuild.VERSION.SDK_INT: 23\n...\nassertionTag: Second Assertion\n</code></pre>"},{"location":"ui-tests/#test-rule-chains","title":"Test rule chains","text":"<pre><code>// Example test rule chain\n@get:Rule\nval rule = RuleChain.outerRule(LoginRule())\n.around(ActivityScenarioRule(CartActivity::class.java))\n.around(LoadingScreenRule())\n</code></pre> <p>If you use a test rule chain, the position of the <code>DetectLeaksAfterTestSuccess</code> rule in that chain could be significant. For example, if you use an <code>ActivityScenarioRule</code> that automatically finishes the activity at the end of a test, having <code>DetectLeaksAfterTestSuccess</code> around <code>ActivityScenarioRule</code> will detect leaks after the activity is destroyed and therefore detect any activity leak. But then  <code>DetectLeaksAfterTestSuccess</code> will not detect fragment leaks that go away when the activity is destroyed.</p> <pre><code>@get:Rule\nval rule = RuleChain.outerRule(LoginRule())\n// Detect leaks AFTER activity is destroyed\n.around(DetectLeaksAfterTestSuccess(tag = \"AfterActivityDestroyed\"))\n.around(ActivityScenarioRule())\n.around(LoadingScreenRule())\n</code></pre> <p>If instead you set up <code>ActivityScenarioRule</code> around <code>DetectLeaksAfterTestSuccess</code>, destroyed activity leaks will not be detected as the activity will still be created when the leak assertion rule runs, but more fragment leaks might be detected.</p> <pre><code>@get:Rule\nval rule = RuleChain.outerRule(LoginRule())\n.around(ActivityScenarioRule(CartActivity::class.java))\n// Detect leaks BEFORE activity is destroyed\n.around(DetectLeaksAfterTestSuccess(tag = \"BeforeActivityDestroyed\"))\n.around(LoadingScreenRule())\n</code></pre> <p>To detect all leaks, the best option is to set up the <code>DetectLeaksAfterTestSuccess</code> rule twice, before and after the <code>ActivityScenarioRule</code> rule.</p> <pre><code>// Detect leaks BEFORE and AFTER activity is destroyed\n@get:Rule\nval rule = RuleChain.outerRule(LoginRule())\n.around(DetectLeaksAfterTestSuccess(tag = \"AfterActivityDestroyed\"))\n.around(ActivityScenarioRule(CartActivity::class.java))\n.around(DetectLeaksAfterTestSuccess(tag = \"BeforeActivityDestroyed\"))\n.around(LoadingScreenRule())\n</code></pre> <p><code>RuleChain.detectLeaksAfterTestSuccessWrapping()</code> is a helper for doing just that:</p> <pre><code>// Detect leaks BEFORE and AFTER activity is destroyed\n@get:Rule\nval rule = RuleChain.outerRule(LoginRule())\n// The tag will be suffixed with \"Before\" and \"After\".\n.detectLeaksAfterTestSuccessWrapping(tag = \"ActivitiesDestroyed\") {\naround(ActivityScenarioRule(CartActivity::class.java))\n}\n.around(LoadingScreenRule())\n</code></pre>"},{"location":"ui-tests/#customizing-assertnoleaks","title":"Customizing <code>assertNoLeaks()</code>","text":"<p><code>LeakAssertions.assertNoLeaks()</code> delegates calls to a global <code>DetectLeaksAssert</code> implementation, which by default is an instance of <code>AndroidDetectLeaksAssert</code>. You can change the <code>DetectLeaksAssert</code> implementation by calling <code>DetectLeaksAssert.update(customLeaksAssert)</code>.</p> <p>The <code>AndroidDetectLeaksAssert</code> implementation performs a heap dump when retained instances are detected, analyzes the heap, then passes the result to a <code>HeapAnalysisReporter</code>. The default <code>HeapAnalysisReporter</code> is <code>NoLeakAssertionFailedError.throwOnApplicationLeaks()</code> which throws a <code>NoLeakAssertionFailedError</code> if an application leak is detected.</p> <p>You could provide a custom implementation to also upload heap analysis results to a central place before failing the test: <pre><code>val throwingReporter = NoLeakAssertionFailedError.throwOnApplicationLeaks()\n\nDetectLeaksAssert.update(AndroidDetectLeaksAssert(\nheapAnalysisReporter = { heapAnalysis -&gt;\n// Upload the heap analysis result\nheapAnalysisUploader.upload(heapAnalysis)\n// Fail the test if there are application leaks\nthrowingReporter.reportHeapAnalysis(heapAnalysis)\n}\n))\n</code></pre></p>"},{"location":"upgrading-to-leakcanary-2.0/","title":"Upgrading to LeakCanary 2","text":"<p>LeakCanary 2 is a major rewrite. High level changes:</p> <ul> <li>New heap analyzer, reimplemented from scratch to use 10 times less memory (see Shark).</li> <li>APIs updated to simplify configuration and provide access to the new heap analyzer.</li> <li>Internals rewritten to 100% Kotlin.</li> <li>Multiple leaks detected in one analysis, grouped per leak type</li> </ul>"},{"location":"upgrading-to-leakcanary-2.0/#dependencies","title":"Dependencies","text":""},{"location":"upgrading-to-leakcanary-2.0/#before","title":"Before","text":"<pre><code>dependencies {\ndebugImplementation 'com.squareup.leakcanary:leakcanary-android:1.6.3'\nreleaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.6.3'\n// Optional, if you use support library fragments:\ndebugImplementation 'com.squareup.leakcanary:leakcanary-support-fragment:1.6.3'\n}\n</code></pre>"},{"location":"upgrading-to-leakcanary-2.0/#now","title":"Now","text":"<pre><code>dependencies {\ndebugImplementation 'com.squareup.leakcanary:leakcanary-android:2.14'\n}\n</code></pre>"},{"location":"upgrading-to-leakcanary-2.0/#worth-noting","title":"Worth noting","text":"<ul> <li>The <code>leakcanary-android-no-op</code> artifact is gone. If you have compile errors, see below.</li> <li>Question: if there\u2019s no no-op anymore, how do I ensure none of this runs during release builds?</li> <li>Answer: as long as you add <code>leakcanary-android</code> as <code>debugImplementation</code>, there won\u2019t be any code referencing LeakCanary in your release builds.</li> <li>LeakCanary does not depend on the support library anymore, and it doesn\u2019t depend on AndroidX either.</li> <li>Detection of AndroidX fragments is automatic if you have the AndroidX fragments dependency.</li> </ul>"},{"location":"upgrading-to-leakcanary-2.0/#default-setup-code","title":"Default setup code","text":""},{"location":"upgrading-to-leakcanary-2.0/#before_1","title":"Before","text":"<pre><code>public class ExampleApplication extends Application {\n\n@Override public void onCreate() {\nsuper.onCreate();\nif (LeakCanary.isInAnalyzerProcess(this)) {\n// This process is dedicated to LeakCanary for heap analysis.\n// You should not init your app in this process.\nreturn;\n}\nLeakCanary.install(this);\n// Normal app init code...\n}\n}\n</code></pre>"},{"location":"upgrading-to-leakcanary-2.0/#now_1","title":"Now","text":"<p>There is no more code for default setup.</p>"},{"location":"upgrading-to-leakcanary-2.0/#worth-noting_1","title":"Worth noting","text":"<ul> <li>LeakCanary auto installs itself</li> <li>LeakCanary analysis now runs in the main process so there is no need to call <code>LeakCanary.isInAnalyzerProcess()</code>.</li> </ul>"},{"location":"upgrading-to-leakcanary-2.0/#retrieve-the-refwatcher","title":"Retrieve the RefWatcher","text":""},{"location":"upgrading-to-leakcanary-2.0/#before_2","title":"Before","text":"<pre><code>val refWatcher: RefWatcher = LeakCanary.installedRefWatcher()\n</code></pre>"},{"location":"upgrading-to-leakcanary-2.0/#now_2","title":"Now","text":"<pre><code>val objectWatcher: ObjectWatcher = AppWatcher.objectWatcher\n</code></pre>"},{"location":"upgrading-to-leakcanary-2.0/#compile-errors-because-refwatcher-is-used-in-release-code","title":"Compile errors because RefWatcher is used in release code","text":"<p>If you were using <code>RefWatcher</code> in non debug code, you now get a compile error because the no-op artifact is gone. ObjectWatcher now lives in the <code>object-watcher</code> artifact, which is suitable for release builds. You have two options:</p>"},{"location":"upgrading-to-leakcanary-2.0/#option-1-add-object-watcher-android-to-release-builds","title":"Option 1: Add <code>object-watcher-android</code> to release builds.","text":"<pre><code>dependencies {\nimplementation 'com.squareup.leakcanary:leakcanary-object-watcher-android:2.14'\n}\n</code></pre> <ul> <li>It will automatically keep weak references to destroyed activities, fragments, and any instance you pass to AppWatcher.objectWatcher.</li> <li>It will not trigger heap dumps or anything else that LeakCanary does.</li> <li>It\u2019s very little code and should have a no impact on your release app.</li> <li>You can use it to count how many objects are retained, for example to add metadata to OutOfMemoryError crashes:</li> </ul> <pre><code>val retainedObjectCount = AppWatcher.objectWatcher.retainedObjectCount\n</code></pre>"},{"location":"upgrading-to-leakcanary-2.0/#option-2-make-your-own-objectwatcher-interface","title":"Option 2: Make your own <code>ObjectWatcher</code> interface","text":"<pre><code>// In shared code\ninterface MaybeObjectWatcher {\nfun watch(watchedObject: Any, description: String)\n\nobject None : MaybeObjectWatcher {\noverride fun watch(watchedObject: Any, description: String) {\n}\n}\n}\n\n// In debug code\nclass RealObjectWatcher : MaybeObjectWatcher {\noverride fun watch(watchedObject: Any, description: String) {\nAppWatcher.objectWatcher.watch(watchedObject, description)\n}\n}\n</code></pre> <p>Use <code>MaybeObjectWatcher.None</code> in release code and <code>RealObjectWatcher</code> in debug code.</p>"},{"location":"upgrading-to-leakcanary-2.0/#configuring-leakcanary","title":"Configuring LeakCanary","text":""},{"location":"upgrading-to-leakcanary-2.0/#before_3","title":"Before","text":"<pre><code>public class DebugExampleApplication extends ExampleApplication {\n\n@Override protected void installLeakCanary() {\nRefWatcher refWatcher = LeakCanary.refWatcher(this)\n.watchActivities(false)\n.buildAndInstall();\n}\n}\n</code></pre>"},{"location":"upgrading-to-leakcanary-2.0/#now_3","title":"Now","text":"<p>AppWatcher is in charge of detecting retained objects. Its configuration can be updated at any time by replacing AppWatcher.config:</p> <pre><code>class DebugExampleApplication : ExampleApplication() {\n\noverride fun onCreate() {\nsuper.onCreate()\nAppWatcher.config = AppWatcher.config.copy(watchFragmentViews = false)\n}\n}\n</code></pre> <p>LeakCanary is in charge of taking heap dumps and analyzing them. Its configuration can be updated at any time by replacing LeakCanary.config:</p> <pre><code>disableLeakCanaryButton.setOnClickListener {\nLeakCanary.config = LeakCanary.config.copy(dumpHeap = false)\n}\n</code></pre>"},{"location":"upgrading-to-leakcanary-2.0/#running-leakcanary-in-instrumentation-tests","title":"Running LeakCanary in instrumentation tests","text":""},{"location":"upgrading-to-leakcanary-2.0/#before_4","title":"Before","text":"<p>In your <code>build.gradle</code> file:</p> <pre><code>dependencies {\nandroidTestImplementation \"com.squareup.leakcanary:leakcanary-android-instrumentation:${leakCanaryVersion}\"\n}\n\nandroid {\ndefaultConfig {\n// ...\n\ntestInstrumentationRunner \"android.support.test.runner.AndroidJUnitRunner\"\ntestInstrumentationRunnerArgument \"listener\", \"com.squareup.leakcanary.FailTestOnLeakRunListener\"\n}\n}\n</code></pre> <p>In your test <code>Application</code> class:</p> <pre><code>public class InstrumentationTestExampleApplication extends DebugExampleApplication {\n@Override protected void installLeakCanary() {\nInstrumentationLeakDetector.instrumentationRefWatcher(this)\n.buildAndInstall();\n}\n}\n</code></pre>"},{"location":"upgrading-to-leakcanary-2.0/#now_4","title":"Now","text":"<p>Remove all the previous test related leak detection code then follow Leak detection in UI tests.</p>"},{"location":"upgrading-to-leakcanary-2.0/#analysis-listener-uploading-to-a-server","title":"Analysis listener / uploading to a server","text":""},{"location":"upgrading-to-leakcanary-2.0/#before_5","title":"Before","text":"<pre><code>public class LeakUploadService extends DisplayLeakService {\n@Override protected void afterDefaultHandling(HeapDump heapDump, AnalysisResult result, String leakInfo) {\n// TODO Upload result to server\n}\n}\n</code></pre> <pre><code>RefWatcher refWatcher = LeakCanary.refWatcher(this)\n.listenerServiceClass(LeakUploadService.class)\n.buildAndInstall();\n</code></pre> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"&gt;\n&lt;application android:name=\"com.example.DebugExampleApplication\"&gt;\n&lt;service android:name=\"com.example.LeakUploadService\" /&gt;\n&lt;/application&gt;\n&lt;/manifest&gt;\n</code></pre>"},{"location":"upgrading-to-leakcanary-2.0/#now_5","title":"Now","text":"<pre><code>class LeakUploader : OnHeapAnalyzedListener {\n\nval defaultListener = DefaultOnHeapAnalyzedListener.create()\n\noverride fun onHeapAnalyzed(heapAnalysis: HeapAnalysis) {\nTODO(\"Upload heap analysis to server\")\n\n// Delegate to default behavior (notification and saving result)\ndefaultListener.onHeapAnalyzed(heapAnalysis)\n}\n}\n\nclass DebugExampleApplication : ExampleApplication() {\n\noverride fun onCreate() {\nsuper.onCreate()\nLeakCanary.config = LeakCanary.config.copy(\nonHeapAnalyzedListener = LeakUploader()\n)\n}\n}\n</code></pre>"},{"location":"upgrading-to-leakcanary-2.0/#matching-known-library-leaks","title":"Matching known library leaks","text":""},{"location":"upgrading-to-leakcanary-2.0/#before_6","title":"Before","text":"<pre><code>ExcludedRefs excludedRefs = AndroidExcludedRefs.createAppDefaults()\n.staticField(\"com.samsing.SomeSingleton\", \"sContext\")\n.build();\nRefWatcher refWatcher = LeakCanary.refWatcher(this)\n.excludedRefs(excludedRefs)\n.buildAndInstall();\n}\n</code></pre>"},{"location":"upgrading-to-leakcanary-2.0/#now_6","title":"Now","text":"<pre><code>LeakCanary.config = LeakCanary.config.copy(\nreferenceMatchers = AndroidReferenceMatchers.appDefaults +\nAndroidReferenceMatchers.staticFieldLeak(\n\"com.samsing.SomeSingleton\",\n\"sContext\"\n)\n)\n</code></pre> <p>Info</p> <p>There is no equivalent API to <code>ExcludedRefs.Builder.clazz()</code> because it led to abuses. Instead see Ignoring specific activities or fragment classes.</p>"},{"location":"upgrading-to-leakcanary-2.0/#public-api-packages","title":"Public API packages","text":""},{"location":"upgrading-to-leakcanary-2.0/#before_7","title":"Before","text":"<p>All public APIs were in <code>com.squareup.leakcanary.*</code></p>"},{"location":"upgrading-to-leakcanary-2.0/#now_7","title":"Now","text":"<p>All public APIs are in <code>leakcanary.*</code></p>"},{"location":"uploading/","title":"Uploading analysis results","text":"<p>You can add an <code>EventListener</code> to upload the analysis result to a server of your choosing:</p> <pre><code>class DebugExampleApplication : ExampleApplication() {\n\noverride fun onCreate() {\nsuper.onCreate()\nval analysisUploadListener = EventListener { event -&gt;\nif (event is HeapAnalysisSucceeded) {\nval heapAnalysis = event.heapAnalysis\nTODO(\"Upload heap analysis to server\")\n}\n}\n\nLeakCanary.config = LeakCanary.config.run {\ncopy(eventListeners = eventListeners + analysisUploadListener)\n}\n}\n}\n</code></pre>"},{"location":"uploading/#uploading-to-bugsnag","title":"Uploading to Bugsnag","text":"<p>A leak trace has a lot in common with a stack trace, so if you lack the engineering resources to build a backend for LeakCanary, you can instead upload leak traces to a crash reporting backend. The client needs to support grouping via custom client-side hashing as well as custom metadata with support for newlines.</p> <p>Info</p> <p>As of this writing, the only known library suitable for uploading leaks is the Bugsnag client. If you managed to make it work with another library, please file an issue.</p> <p>Create a Bugsnag account, create a new project for leak reporting and grab an API key. Make sure the app has the <code>android.permission.INTERNET</code> permission then add the latest version of the Bugsnag Android client library to <code>build.gradle</code>:</p> <pre><code>dependencies {\n// debugImplementation because LeakCanary should only run in debug builds.\ndebugImplementation 'com.squareup.leakcanary:leakcanary-android:2.14'\ndebugImplementation \"com.bugsnag:bugsnag-android:$bugsnagVersion\"\n}\n</code></pre> <p>Info</p> <p>If you\u2019re only using Bugsnag for uploading leaks, then you do not need to set up the Bugsnag Gradle plugin or to configure the API key in your app manifest.</p> <p>Create a new <code>BugsnagLeakUploader</code>:</p> <pre><code>import android.app.Application\nimport com.bugsnag.android.Bugsnag\nimport com.bugsnag.android.Configuration\nimport com.bugsnag.android.ErrorTypes\nimport com.bugsnag.android.Event\nimport com.bugsnag.android.ThreadSendPolicy\nimport shark.HeapAnalysis\nimport shark.HeapAnalysisFailure\nimport shark.HeapAnalysisSuccess\nimport shark.Leak\nimport shark.LeakTrace\nimport shark.LeakTraceReference\nimport shark.LibraryLeak\n\nclass BugsnagLeakUploader(applicationContext: Application) {\n\nprivate val bugsnagClient = Bugsnag.start(\napplicationContext,\nConfiguration(\"YOUR_BUGSNAG_API_KEY\").apply {\nenabledErrorTypes = ErrorTypes(\nanrs = false,\nndkCrashes = false,\nunhandledExceptions = false,\nunhandledRejections = false\n)\nsendThreads = ThreadSendPolicy.NEVER\n}\n)\n\nfun upload(heapAnalysis: HeapAnalysis) {\nwhen (heapAnalysis) {\nis HeapAnalysisSuccess -&gt; {\nval allLeakTraces = heapAnalysis\n.allLeaks\n.toList()\n.flatMap { leak -&gt;\nleak.leakTraces.map { leakTrace -&gt; leak to leakTrace }\n}\nif (allLeakTraces.isEmpty()) {\n// Track how often we perform a heap analysis that yields no result.\nbugsnagClient.notify(NoLeakException()) { event -&gt;\nevent.addHeapAnalysis(heapAnalysis)\ntrue\n}\n} else {\nallLeakTraces.forEach { (leak, leakTrace) -&gt;\nval message = \"Memory leak: ${leak.shortDescription}. See LEAK tab.\"\nval exception = leakTrace.asFakeException(message)\nbugsnagClient.notify(exception) { event -&gt;\nevent.addHeapAnalysis(heapAnalysis)\nevent.addLeak(leak)\nevent.addLeakTrace(leakTrace)\nevent.groupingHash = leak.signature\ntrue\n}\n}\n}\n}\nis HeapAnalysisFailure -&gt; {\n// Please file any reported failure to\n// https://github.com/square/leakcanary/issues\nbugsnagClient.notify(heapAnalysis.exception)\n}\n}\n}\n\nclass NoLeakException : RuntimeException()\n\nprivate fun Event.addHeapAnalysis(heapAnalysis: HeapAnalysisSuccess) {\naddMetadata(\"Leak\", \"heapDumpPath\", heapAnalysis.heapDumpFile.absolutePath)\nheapAnalysis.metadata.forEach { (key, value) -&gt;\naddMetadata(\"Leak\", key, value)\n}\naddMetadata(\"Leak\", \"analysisDurationMs\", heapAnalysis.analysisDurationMillis)\n}\n\nprivate fun Event.addLeak(leak: Leak) {\naddMetadata(\"Leak\", \"libraryLeak\", leak is LibraryLeak)\nif (leak is LibraryLeak) {\naddMetadata(\"Leak\", \"libraryLeakPattern\", leak.pattern.toString())\naddMetadata(\"Leak\", \"libraryLeakDescription\", leak.description)\n}\n}\n\nprivate fun Event.addLeakTrace(leakTrace: LeakTrace) {\naddMetadata(\"Leak\", \"retainedHeapByteSize\", leakTrace.retainedHeapByteSize)\naddMetadata(\"Leak\", \"signature\", leakTrace.signature)\naddMetadata(\"Leak\", \"leakTrace\", leakTrace.toString())\n}\n\nprivate fun LeakTrace.asFakeException(message: String): RuntimeException {\nval exception = RuntimeException(message)\nval stackTrace = mutableListOf&lt;StackTraceElement&gt;()\nstackTrace.add(StackTraceElement(\"GcRoot\", gcRootType.name, \"GcRoot.kt\", 42))\nfor (cause in referencePath) {\nstackTrace.add(buildStackTraceElement(cause))\n}\nexception.stackTrace = stackTrace.toTypedArray()\nreturn exception\n}\n\nprivate fun buildStackTraceElement(reference: LeakTraceReference): StackTraceElement {\nval file = reference.owningClassName.substringAfterLast(\".\") + \".kt\"\nreturn StackTraceElement(reference.owningClassName, reference.referenceDisplayName, file, 42)\n}\n}\n</code></pre> <p>Then add an <code>EventListener</code> to upload the analysis result to Bugsnag:</p> <pre><code>class DebugExampleApplication : ExampleApplication() {\n\noverride fun onCreate() {\nsuper.onCreate()\nLeakCanary.config = LeakCanary.config.copy(\nonHeapAnalyzedListener = BugsnagLeakUploader(applicationContext = this)\n)\n}\n}\n</code></pre> <p>You should start seeing leaks reported into Bugsnag, grouped by their leak signature:</p> <p></p> <p>The <code>LEAK</code> tab contains the leak trace:</p> <p></p>"},{"location":"snippets/bugsnag-uploader/","title":"Bugsnag uploader","text":"<pre><code>import android.app.Application\nimport com.bugsnag.android.Bugsnag\nimport com.bugsnag.android.Configuration\nimport com.bugsnag.android.ErrorTypes\nimport com.bugsnag.android.Event\nimport com.bugsnag.android.ThreadSendPolicy\nimport shark.HeapAnalysis\nimport shark.HeapAnalysisFailure\nimport shark.HeapAnalysisSuccess\nimport shark.Leak\nimport shark.LeakTrace\nimport shark.LeakTraceReference\nimport shark.LibraryLeak\n\nclass BugsnagLeakUploader(applicationContext: Application) {\n\nprivate val bugsnagClient = Bugsnag.start(\napplicationContext,\nConfiguration(\"YOUR_BUGSNAG_API_KEY\").apply {\nenabledErrorTypes = ErrorTypes(\nanrs = false,\nndkCrashes = false,\nunhandledExceptions = false,\nunhandledRejections = false\n)\nsendThreads = ThreadSendPolicy.NEVER\n}\n)\n\nfun upload(heapAnalysis: HeapAnalysis) {\nwhen (heapAnalysis) {\nis HeapAnalysisSuccess -&gt; {\nval allLeakTraces = heapAnalysis\n.allLeaks\n.toList()\n.flatMap { leak -&gt;\nleak.leakTraces.map { leakTrace -&gt; leak to leakTrace }\n}\nif (allLeakTraces.isEmpty()) {\n// Track how often we perform a heap analysis that yields no result.\nbugsnagClient.notify(NoLeakException()) { event -&gt;\nevent.addHeapAnalysis(heapAnalysis)\ntrue\n}\n} else {\nallLeakTraces.forEach { (leak, leakTrace) -&gt;\nval message = \"Memory leak: ${leak.shortDescription}. See LEAK tab.\"\nval exception = leakTrace.asFakeException(message)\nbugsnagClient.notify(exception) { event -&gt;\nevent.addHeapAnalysis(heapAnalysis)\nevent.addLeak(leak)\nevent.addLeakTrace(leakTrace)\nevent.groupingHash = leak.signature\ntrue\n}\n}\n}\n}\nis HeapAnalysisFailure -&gt; {\n// Please file any reported failure to\n// https://github.com/square/leakcanary/issues\nbugsnagClient.notify(heapAnalysis.exception)\n}\n}\n}\n\nclass NoLeakException : RuntimeException()\n\nprivate fun Event.addHeapAnalysis(heapAnalysis: HeapAnalysisSuccess) {\naddMetadata(\"Leak\", \"heapDumpPath\", heapAnalysis.heapDumpFile.absolutePath)\nheapAnalysis.metadata.forEach { (key, value) -&gt;\naddMetadata(\"Leak\", key, value)\n}\naddMetadata(\"Leak\", \"analysisDurationMs\", heapAnalysis.analysisDurationMillis)\n}\n\nprivate fun Event.addLeak(leak: Leak) {\naddMetadata(\"Leak\", \"libraryLeak\", leak is LibraryLeak)\nif (leak is LibraryLeak) {\naddMetadata(\"Leak\", \"libraryLeakPattern\", leak.pattern.toString())\naddMetadata(\"Leak\", \"libraryLeakDescription\", leak.description)\n}\n}\n\nprivate fun Event.addLeakTrace(leakTrace: LeakTrace) {\naddMetadata(\"Leak\", \"retainedHeapByteSize\", leakTrace.retainedHeapByteSize)\naddMetadata(\"Leak\", \"signature\", leakTrace.signature)\naddMetadata(\"Leak\", \"leakTrace\", leakTrace.toString())\n}\n\nprivate fun LeakTrace.asFakeException(message: String): RuntimeException {\nval exception = RuntimeException(message)\nval stackTrace = mutableListOf&lt;StackTraceElement&gt;()\nstackTrace.add(StackTraceElement(\"GcRoot\", gcRootType.name, \"GcRoot.kt\", 42))\nfor (cause in referencePath) {\nstackTrace.add(buildStackTraceElement(cause))\n}\nexception.stackTrace = stackTrace.toTypedArray()\nreturn exception\n}\n\nprivate fun buildStackTraceElement(reference: LeakTraceReference): StackTraceElement {\nval file = reference.owningClassName.substringAfterLast(\".\") + \".kt\"\nreturn StackTraceElement(reference.owningClassName, reference.referenceDisplayName, file, 42)\n}\n}\n</code></pre>"}]}